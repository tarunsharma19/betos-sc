import { createHash } from "crypto";
import _ from "lodash";
/**
 *  Default is to expire requests 30 seconds from now.
 */
const getDefaultRequestTimestamp = () => Math.floor(Date.now() / 1000) + 30;
export class SwitchboardSecrets {
    url;
    constructor(url) {
        this.url = url ?? "https://api.secrets.switchboard.xyz";
    }
    async getUser(userPubkey, ciphersuite) {
        const url = `${this.url}/user/${userPubkey}/ciphersuite/${ciphersuite}`;
        const response = await fetch(url, {
            method: "GET",
            headers: {
                "Content-Type": "application/json",
                "X-Signed-Header": Buffer.from(createHash("sha256").update("test-sig").digest("hex")).toString("hex"),
            },
        });
        if (!response.ok) {
            throw new Error(`getUser failed: ${response.statusText}`);
        }
        const json = await response.json();
        return {
            ciphersuite: json.ciphersuite,
            user_pubkey: json.user_pubkey,
            created_at: new Date(json.created_at),
            updated_at: new Date(json.updated_at),
            contact_info: json.contact_info,
        };
    }
    createOrUpdateUserRequest(
    /**
     *  The address of the user.
     */
    userPubkey, 
    /**
     *  'ed25519' for Solana users, 'ethers' for EVM users.
     */
    ciphersuite, 
    /**
     *  Stringified contact info for the user.
     */
    contactInfo = "", 
    /**
     *  The timestamp that this request expires.
     *
     *  Default: now + 30 seconds.
     */
    expiryTimestamp = getDefaultRequestTimestamp()) {
        return new UpdateUserPayload(userPubkey, ciphersuite, contactInfo, expiryTimestamp);
    }
    async createOrUpdateUser(request, signature) {
        const url = `${this.url}/user`;
        const response = await fetch(url, {
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "X-Signed-Header": signature,
            },
            body: request.toString(),
        });
        if (!response.ok) {
            throw new Error(`createOrUpdateUser failed: ${response.statusText}`);
        }
    }
    async getUserSecrets(userPubkey, ciphersuite) {
        const url = `${this.url}/user/${userPubkey}/ciphersuite/${ciphersuite}/secrets`;
        const response = await fetch(url, {
            method: "GET",
            headers: {
                "Content-Type": "application/json",
                "X-Signed-Header": Buffer.from(createHash("sha256").update("test-sig").digest("hex")).toString("hex"),
            },
        });
        if (!response.ok) {
            throw new Error(`getUserSecrets failed: ${response.statusText}`);
        }
        const json = await response.json();
        return _.isArray(json)
            ? json
                .map((item) => ({
                secret: item.secret,
                secret_name: item.secret_name,
                created_at: new Date(item.created_at),
                updated_at: new Date(item.updated_at),
                whitelist: _.isArray(item.whitelisted_mrenclaves)
                    ? item.whitelisted_mrenclaves.filter((val) => !!val)
                    : [],
            }))
                .sort((a, b) => b.updated_at.getTime() - a.updated_at.getTime())
            : [];
    }
    createSecretRequest(
    /**
     *  The address of the user.
     */
    userPubkey, 
    /**
     *  'ed25519' for Solana users, 'ethers' for EVM users.
     */
    ciphersuite, 
    /**
     *  The key of the secret.
     *
     *  Keys must be unique per user.
     */
    secretName, 
    /**
     *  The value of the secret.
     */
    secretValue, 
    /**
     *  The timestamp that this request expires.
     *
     *  Default: now + 30 seconds.
     */
    expiryTimestamp = getDefaultRequestTimestamp()) {
        return new CreateSecretPayload(userPubkey, ciphersuite, secretName, secretValue, expiryTimestamp);
    }
    async createSecret(request, signature) {
        const url = `${this.url}/secret`;
        const response = await fetch(url, {
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "X-Signed-Header": signature,
            },
            body: request.toString(),
        });
        if (!response.ok) {
            throw new Error(`createSecret failed: ${response.statusText}`);
        }
    }
    createAddMrEnclaveRequest(
    /**
     *  The address of the user.
     */
    userPubkey, 
    /**
     *  'ed25519' for Solana users, 'ethers' for EVM users.
     */
    ciphersuite, 
    /**
     *  The MrEnclave value to add.
     */
    mrEnclave, 
    /**
     *  The names of the secrets to whitelist the MrEnclave value for.
     */
    secretNames, 
    /**
     *  The timestamp that this request expires.
     *
     *  Default: now + 30 seconds.
     */
    expiryTimestamp = getDefaultRequestTimestamp()) {
        return new AddMrEnclavePayload(userPubkey, ciphersuite, mrEnclave, secretNames, expiryTimestamp);
    }
    async addMrEnclave(request, signature) {
        const url = `${this.url}/mrenclave/whitelist`;
        const response = await fetch(url, {
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "X-Signed-Header": signature,
            },
            body: request.toString(),
        });
        if (!response.ok) {
            throw new Error(`addMrEnclave failed: ${response.statusText}`);
        }
    }
    createRemoveMrEnclaveRequest(
    /**
     *  The address of the user.
     */
    userPubkey, 
    /**
     *  'ed25519' for Solana users, 'ethers' for EVM users.
     */
    ciphersuite, 
    /**
     *  The mrEnclave value to remove.
     */
    mrEnclave, 
    /**
     *  The timestamp that this request expires.
     *
     *  Default: now + 30 seconds.
     */
    expiryTimestamp = getDefaultRequestTimestamp()) {
        return new RemoveMrEnclavePayload(userPubkey, ciphersuite, mrEnclave, expiryTimestamp);
    }
    async removeMrEnclave(request, signature) {
        const url = `${this.url}/mrenclave/whitelist`;
        const response = await fetch(url, {
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "X-Signed-Header": signature,
            },
            body: request.toString(),
        });
        if (!response.ok) {
            throw new Error(`removeMrEnclave failed: ${response.statusText}`);
        }
    }
    createDeleteSecretRequest(
    /**
     *  The address of the user.
     */
    userPubkey, 
    /**
     *  'ed25519' for Solana users, 'ethers' for EVM users.
     */
    ciphersuite, 
    /**
     *  The name fo the secret to delete.
     */
    secretName, 
    /**
     *  The timestamp that this request expires.
     *
     *  Default: now + 30 seconds.
     */
    expiryTimestamp = getDefaultRequestTimestamp()) {
        return new DeleteSecretPayload(userPubkey, ciphersuite, secretName, expiryTimestamp);
    }
    async deleteSecret(request, signature) {
        const url = `${this.url}/secret`;
        const response = await fetch(url, {
            method: "DELETE",
            headers: {
                "Content-Type": "application/json",
                "X-Signed-Header": signature,
            },
            body: request.toString(),
        });
        if (!response.ok) {
            throw new Error(`deleteSecret failed: ${response.statusText}`);
        }
    }
}
export class UpdateUserPayload {
    user_pubkey;
    ciphersuite;
    contact_info;
    timestamp;
    constructor(user_pubkey, ciphersuite, contact_info, timestamp) {
        this.user_pubkey = user_pubkey;
        this.ciphersuite = ciphersuite;
        this.contact_info = contact_info;
        this.timestamp = timestamp;
    }
    static from(obj) {
        return new UpdateUserPayload(obj.user_pubkey, obj.ciphersuite, obj.contact_info, obj.timestamp);
    }
    toJSON() {
        return {
            user_pubkey: this.user_pubkey,
            ciphersuite: this.ciphersuite,
            contact_info: this.contact_info,
            timestamp: this.timestamp,
        };
    }
    toString() {
        return JSON.stringify(this.toJSON());
    }
    toEncodedMessage() {
        return Buffer.from(createHash("sha256").update(this.toString()).digest("hex"));
    }
}
export class CreateSecretPayload {
    user_pubkey;
    ciphersuite;
    secret_name;
    secret;
    timestamp;
    constructor(user_pubkey, ciphersuite, secret_name, secret, timestamp) {
        this.user_pubkey = user_pubkey;
        this.ciphersuite = ciphersuite;
        this.secret_name = secret_name;
        this.secret = secret;
        this.timestamp = timestamp;
    }
    static from(obj) {
        return new CreateSecretPayload(obj.user_pubkey, obj.ciphersuite, obj.secret_name, obj.secret, obj.timestamp);
    }
    toJSON() {
        return {
            user_pubkey: this.user_pubkey,
            ciphersuite: this.ciphersuite,
            secret: this.secret,
            secret_name: this.secret_name,
            timestamp: this.timestamp,
        };
    }
    toString() {
        return JSON.stringify(this.toJSON());
    }
    toEncodedMessage() {
        return Buffer.from(createHash("sha256").update(this.toString()).digest("hex"));
    }
}
export class AddMrEnclavePayload {
    user_pubkey;
    ciphersuite;
    mr_enclave;
    secret_names;
    timestamp;
    constructor(user_pubkey, ciphersuite, mr_enclave, secret_names, timestamp) {
        this.user_pubkey = user_pubkey;
        this.ciphersuite = ciphersuite;
        this.mr_enclave = mr_enclave;
        this.secret_names = secret_names;
        this.timestamp = timestamp;
    }
    static from(obj) {
        return new AddMrEnclavePayload(obj.user_pubkey, obj.ciphersuite, obj.mr_enclave, obj.secret_names, obj.timestamp);
    }
    toJSON() {
        return {
            user_pubkey: this.user_pubkey,
            ciphersuite: this.ciphersuite,
            mr_enclave: this.mr_enclave,
            secret_names: this.secret_names,
            timestamp: this.timestamp,
        };
    }
    toString() {
        return JSON.stringify(this.toJSON());
    }
    toEncodedMessage() {
        return Buffer.from(createHash("sha256").update(this.toString()).digest("hex"));
    }
}
export class RemoveMrEnclavePayload {
    user_pubkey;
    ciphersuite;
    mr_enclave;
    timestamp;
    constructor(user_pubkey, ciphersuite, mr_enclave, timestamp) {
        this.user_pubkey = user_pubkey;
        this.ciphersuite = ciphersuite;
        this.mr_enclave = mr_enclave;
        this.timestamp = timestamp;
    }
    static from(obj) {
        return new RemoveMrEnclavePayload(obj.user_pubkey, obj.ciphersuite, obj.mr_enclave, obj.timestamp);
    }
    toJSON() {
        return {
            user_pubkey: this.user_pubkey,
            ciphersuite: this.ciphersuite,
            mr_enclave: this.mr_enclave,
            timestamp: this.timestamp,
        };
    }
    toString() {
        return JSON.stringify(this.toJSON());
    }
    toEncodedMessage() {
        return Buffer.from(createHash("sha256").update(this.toString()).digest("hex"));
    }
}
export class DeleteSecretPayload {
    user_pubkey;
    ciphersuite;
    secret_name;
    timestamp;
    constructor(user_pubkey, ciphersuite, secret_name, timestamp) {
        this.user_pubkey = user_pubkey;
        this.ciphersuite = ciphersuite;
        this.secret_name = secret_name;
        this.timestamp = timestamp;
    }
    static from(obj) {
        return new DeleteSecretPayload(obj.user_pubkey, obj.ciphersuite, obj.secret_name, obj.timestamp);
    }
    toJSON() {
        return {
            user_pubkey: this.user_pubkey,
            ciphersuite: this.ciphersuite,
            secret_name: this.secret_name,
            timestamp: this.timestamp,
        };
    }
    toString() {
        return JSON.stringify(this.toJSON());
    }
    toEncodedMessage() {
        return Buffer.from(createHash("sha256").update(this.toString()).digest("hex"));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VjcmV0cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9zZWNyZXRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDcEMsT0FBTyxDQUFDLE1BQU0sUUFBUSxDQUFDO0FBRXZCOztHQUVHO0FBQ0gsTUFBTSwwQkFBMEIsR0FBRyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7QUFrQjVFLE1BQU0sT0FBTyxrQkFBa0I7SUFDcEIsR0FBRyxDQUFTO0lBQ3JCLFlBQW1CLEdBQVk7UUFDN0IsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLElBQUkscUNBQXFDLENBQUM7SUFDMUQsQ0FBQztJQUVNLEtBQUssQ0FBQyxPQUFPLENBQ2xCLFVBQWtCLEVBQ2xCLFdBQW1CO1FBRW5CLE1BQU0sR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsU0FBUyxVQUFVLGdCQUFnQixXQUFXLEVBQUUsQ0FBQztRQUN4RSxNQUFNLFFBQVEsR0FBRyxNQUFNLEtBQUssQ0FBQyxHQUFHLEVBQUU7WUFDaEMsTUFBTSxFQUFFLEtBQUs7WUFDYixPQUFPLEVBQUU7Z0JBQ1AsY0FBYyxFQUFFLGtCQUFrQjtnQkFDbEMsaUJBQWlCLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FDNUIsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQ3RELENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQzthQUNsQjtTQUNGLENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxFQUFFLENBQUM7WUFDakIsTUFBTSxJQUFJLEtBQUssQ0FBQyxtQkFBbUIsUUFBUSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUM7UUFD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O1FBQzFDLE9BQU8sSUFBSSxtQkFBbUIsQ0FDNUIsR0FBRyxDQUFDLFdBQVcsRUFDZixHQUFHLENBQUMsV0FBVyxFQUNmLEdBQUcsQ0FBQyxXQUFXLEVBQ2YsR0FBRyxDQUFDLFNBQVMsQ0FDZCxDQUFDO0lBQ0osQ0FBQztJQUVNLE1BQU07UUFDWCxPQUFPO1lBQ0wsV0FBVyxFQUFFLElBQUksQ0FBQyxXQUFXO1lBQzdCLFdBQVcsRUFBRSxJQUFJLENBQUMsV0FBVztZQUM3QixXQUFXLEVBQUUsSUFBSSxDQUFDLFdBQVc7WUFDN0IsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTO1NBQzFCLENBQUM7SUFDSixDQUFDO0lBRU0sUUFBUTtRQUNiLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztJQUN2QyxDQUFDO0lBRU0sZ0JBQWdCO1FBQ3JCLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FDaEIsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQzNELENBQUM7SUFDSixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVIYXNoIH0gZnJvbSBcImNyeXB0b1wiO1xuaW1wb3J0IF8gZnJvbSBcImxvZGFzaFwiO1xuXG4vKipcbiAqICBEZWZhdWx0IGlzIHRvIGV4cGlyZSByZXF1ZXN0cyAzMCBzZWNvbmRzIGZyb20gbm93LlxuICovXG5jb25zdCBnZXREZWZhdWx0UmVxdWVzdFRpbWVzdGFtcCA9ICgpID0+IE1hdGguZmxvb3IoRGF0ZS5ub3coKSAvIDEwMDApICsgMzA7XG5cbmV4cG9ydCB0eXBlIFNlY3JldHNBcGlVc2VyID0ge1xuICBjaXBoZXJzdWl0ZTogXCJlZDI1NTE5XCI7XG4gIHVzZXJfcHVia2V5OiBzdHJpbmc7XG4gIGNyZWF0ZWRfYXQ6IERhdGU7XG4gIHVwZGF0ZWRfYXQ6IERhdGU7XG4gIGNvbnRhY3RfaW5mbzogc3RyaW5nO1xufTtcblxuZXhwb3J0IHR5cGUgU2VjcmV0c0FwaVNlY3JldCA9IHtcbiAgY3JlYXRlZF9hdDogRGF0ZTtcbiAgdXBkYXRlZF9hdDogRGF0ZTtcbiAgc2VjcmV0OiBzdHJpbmc7XG4gIHNlY3JldF9uYW1lOiBzdHJpbmc7XG4gIHdoaXRlbGlzdDogc3RyaW5nW107XG59O1xuXG5leHBvcnQgY2xhc3MgU3dpdGNoYm9hcmRTZWNyZXRzIHtcbiAgcmVhZG9ubHkgdXJsOiBzdHJpbmc7XG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcih1cmw/OiBzdHJpbmcpIHtcbiAgICB0aGlzLnVybCA9IHVybCA/PyBcImh0dHBzOi8vYXBpLnNlY3JldHMuc3dpdGNoYm9hcmQueHl6XCI7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZ2V0VXNlcihcbiAgICB1c2VyUHVia2V5OiBzdHJpbmcsXG4gICAgY2lwaGVyc3VpdGU6IHN0cmluZ1xuICApOiBQcm9taXNlPFNlY3JldHNBcGlVc2VyPiB7XG4gICAgY29uc3QgdXJsID0gYCR7dGhpcy51cmx9L3VzZXIvJHt1c2VyUHVia2V5fS9jaXBoZXJzdWl0ZS8ke2NpcGhlcnN1aXRlfWA7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cmwsIHtcbiAgICAgIG1ldGhvZDogXCJHRVRcIixcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICAgIFwiWC1TaWduZWQtSGVhZGVyXCI6IEJ1ZmZlci5mcm9tKFxuICAgICAgICAgIGNyZWF0ZUhhc2goXCJzaGEyNTZcIikudXBkYXRlKFwidGVzdC1zaWdcIikuZGlnZXN0KFwiaGV4XCIpXG4gICAgICAgICkudG9TdHJpbmcoXCJoZXhcIiksXG4gICAgICB9LFxuICAgIH0pO1xuICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgZ2V0VXNlciBmYWlsZWQ6ICR7cmVzcG9uc2Uuc3RhdHVzVGV4dH1gKTtcbiAgICB9XG5cbiAgICBjb25zdCBqc29uID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgIHJldHVybiB7XG4gICAgICBjaXBoZXJzdWl0ZToganNvbi5jaXBoZXJzdWl0ZSxcbiAgICAgIHVzZXJfcHVia2V5OiBqc29uLnVzZXJfcHVia2V5LFxuICAgICAgY3JlYXRlZF9hdDogbmV3IERhdGUoanNvbi5jcmVhdGVkX2F0KSxcbiAgICAgIHVwZGF0ZWRfYXQ6IG5ldyBEYXRlKGpzb24udXBkYXRlZF9hdCksXG4gICAgICBjb250YWN0X2luZm86IGpzb24uY29udGFjdF9pbmZvLFxuICAgIH07XG4gIH1cblxuICBwdWJsaWMgY3JlYXRlT3JVcGRhdGVVc2VyUmVxdWVzdChcbiAgICAvKipcbiAgICAgKiAgVGhlIGFkZHJlc3Mgb2YgdGhlIHVzZXIuXG4gICAgICovXG4gICAgdXNlclB1YmtleTogc3RyaW5nLFxuICAgIC8qKlxuICAgICAqICAnZWQyNTUxOScgZm9yIFNvbGFuYSB1c2VycywgJ2V0aGVycycgZm9yIEVWTSB1c2Vycy5cbiAgICAgKi9cbiAgICBjaXBoZXJzdWl0ZTogc3RyaW5nLFxuICAgIC8qKlxuICAgICAqICBTdHJpbmdpZmllZCBjb250YWN0IGluZm8gZm9yIHRoZSB1c2VyLlxuICAgICAqL1xuICAgIGNvbnRhY3RJbmZvID0gXCJcIixcbiAgICAvKipcbiAgICAgKiAgVGhlIHRpbWVzdGFtcCB0aGF0IHRoaXMgcmVxdWVzdCBleHBpcmVzLlxuICAgICAqXG4gICAgICogIERlZmF1bHQ6IG5vdyArIDMwIHNlY29uZHMuXG4gICAgICovXG4gICAgZXhwaXJ5VGltZXN0YW1wID0gZ2V0RGVmYXVsdFJlcXVlc3RUaW1lc3RhbXAoKVxuICApOiBVcGRhdGVVc2VyUGF5bG9hZCB7XG4gICAgcmV0dXJuIG5ldyBVcGRhdGVVc2VyUGF5bG9hZChcbiAgICAgIHVzZXJQdWJrZXksXG4gICAgICBjaXBoZXJzdWl0ZSxcbiAgICAgIGNvbnRhY3RJbmZvLFxuICAgICAgZXhwaXJ5VGltZXN0YW1wXG4gICAgKTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBjcmVhdGVPclVwZGF0ZVVzZXIoXG4gICAgcmVxdWVzdDogVXBkYXRlVXNlclBheWxvYWQsXG4gICAgc2lnbmF0dXJlOiBzdHJpbmdcbiAgKSB7XG4gICAgY29uc3QgdXJsID0gYCR7dGhpcy51cmx9L3VzZXJgO1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2godXJsLCB7XG4gICAgICBtZXRob2Q6IFwiUFVUXCIsXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgICBcIlgtU2lnbmVkLUhlYWRlclwiOiBzaWduYXR1cmUsXG4gICAgICB9LFxuICAgICAgYm9keTogcmVxdWVzdC50b1N0cmluZygpLFxuICAgIH0pO1xuICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgY3JlYXRlT3JVcGRhdGVVc2VyIGZhaWxlZDogJHtyZXNwb25zZS5zdGF0dXNUZXh0fWApO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBnZXRVc2VyU2VjcmV0cyhcbiAgICB1c2VyUHVia2V5OiBzdHJpbmcsXG4gICAgY2lwaGVyc3VpdGU6IHN0cmluZ1xuICApOiBQcm9taXNlPFNlY3JldHNBcGlTZWNyZXRbXT4ge1xuICAgIGNvbnN0IHVybCA9IGAke3RoaXMudXJsfS91c2VyLyR7dXNlclB1YmtleX0vY2lwaGVyc3VpdGUvJHtjaXBoZXJzdWl0ZX0vc2VjcmV0c2A7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cmwsIHtcbiAgICAgIG1ldGhvZDogXCJHRVRcIixcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICAgIFwiWC1TaWduZWQtSGVhZGVyXCI6IEJ1ZmZlci5mcm9tKFxuICAgICAgICAgIGNyZWF0ZUhhc2goXCJzaGEyNTZcIikudXBkYXRlKFwidGVzdC1zaWdcIikuZGlnZXN0KFwiaGV4XCIpXG4gICAgICAgICkudG9TdHJpbmcoXCJoZXhcIiksXG4gICAgICB9LFxuICAgIH0pO1xuICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgZ2V0VXNlclNlY3JldHMgZmFpbGVkOiAke3Jlc3BvbnNlLnN0YXR1c1RleHR9YCk7XG4gICAgfVxuXG4gICAgY29uc3QganNvbiA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICByZXR1cm4gXy5pc0FycmF5KGpzb24pXG4gICAgICA/IGpzb25cbiAgICAgICAgICAubWFwPFNlY3JldHNBcGlTZWNyZXQ+KChpdGVtKSA9PiAoe1xuICAgICAgICAgICAgc2VjcmV0OiBpdGVtLnNlY3JldCxcbiAgICAgICAgICAgIHNlY3JldF9uYW1lOiBpdGVtLnNlY3JldF9uYW1lLFxuICAgICAgICAgICAgY3JlYXRlZF9hdDogbmV3IERhdGUoaXRlbS5jcmVhdGVkX2F0KSxcbiAgICAgICAgICAgIHVwZGF0ZWRfYXQ6IG5ldyBEYXRlKGl0ZW0udXBkYXRlZF9hdCksXG4gICAgICAgICAgICB3aGl0ZWxpc3Q6IF8uaXNBcnJheShpdGVtLndoaXRlbGlzdGVkX21yZW5jbGF2ZXMpXG4gICAgICAgICAgICAgID8gaXRlbS53aGl0ZWxpc3RlZF9tcmVuY2xhdmVzLmZpbHRlcigodmFsOiBzdHJpbmcpID0+ICEhdmFsKVxuICAgICAgICAgICAgICA6IFtdLFxuICAgICAgICAgIH0pKVxuICAgICAgICAgIC5zb3J0KChhLCBiKSA9PiBiLnVwZGF0ZWRfYXQuZ2V0VGltZSgpIC0gYS51cGRhdGVkX2F0LmdldFRpbWUoKSlcbiAgICAgIDogW107XG4gIH1cblxuICBwdWJsaWMgY3JlYXRlU2VjcmV0UmVxdWVzdChcbiAgICAvKipcbiAgICAgKiAgVGhlIGFkZHJlc3Mgb2YgdGhlIHVzZXIuXG4gICAgICovXG4gICAgdXNlclB1YmtleTogc3RyaW5nLFxuICAgIC8qKlxuICAgICAqICAnZWQyNTUxOScgZm9yIFNvbGFuYSB1c2VycywgJ2V0aGVycycgZm9yIEVWTSB1c2Vycy5cbiAgICAgKi9cbiAgICBjaXBoZXJzdWl0ZTogc3RyaW5nLFxuICAgIC8qKlxuICAgICAqICBUaGUga2V5IG9mIHRoZSBzZWNyZXQuXG4gICAgICpcbiAgICAgKiAgS2V5cyBtdXN0IGJlIHVuaXF1ZSBwZXIgdXNlci5cbiAgICAgKi9cbiAgICBzZWNyZXROYW1lOiBzdHJpbmcsXG4gICAgLyoqXG4gICAgICogIFRoZSB2YWx1ZSBvZiB0aGUgc2VjcmV0LlxuICAgICAqL1xuICAgIHNlY3JldFZhbHVlOiBzdHJpbmcsXG4gICAgLyoqXG4gICAgICogIFRoZSB0aW1lc3RhbXAgdGhhdCB0aGlzIHJlcXVlc3QgZXhwaXJlcy5cbiAgICAgKlxuICAgICAqICBEZWZhdWx0OiBub3cgKyAzMCBzZWNvbmRzLlxuICAgICAqL1xuICAgIGV4cGlyeVRpbWVzdGFtcCA9IGdldERlZmF1bHRSZXF1ZXN0VGltZXN0YW1wKClcbiAgKTogQ3JlYXRlU2VjcmV0UGF5bG9hZCB7XG4gICAgcmV0dXJuIG5ldyBDcmVhdGVTZWNyZXRQYXlsb2FkKFxuICAgICAgdXNlclB1YmtleSxcbiAgICAgIGNpcGhlcnN1aXRlLFxuICAgICAgc2VjcmV0TmFtZSxcbiAgICAgIHNlY3JldFZhbHVlLFxuICAgICAgZXhwaXJ5VGltZXN0YW1wXG4gICAgKTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBjcmVhdGVTZWNyZXQocmVxdWVzdDogQ3JlYXRlU2VjcmV0UGF5bG9hZCwgc2lnbmF0dXJlOiBzdHJpbmcpIHtcbiAgICBjb25zdCB1cmwgPSBgJHt0aGlzLnVybH0vc2VjcmV0YDtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybCwge1xuICAgICAgbWV0aG9kOiBcIlBVVFwiLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgICAgXCJYLVNpZ25lZC1IZWFkZXJcIjogc2lnbmF0dXJlLFxuICAgICAgfSxcbiAgICAgIGJvZHk6IHJlcXVlc3QudG9TdHJpbmcoKSxcbiAgICB9KTtcbiAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYGNyZWF0ZVNlY3JldCBmYWlsZWQ6ICR7cmVzcG9uc2Uuc3RhdHVzVGV4dH1gKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgY3JlYXRlQWRkTXJFbmNsYXZlUmVxdWVzdChcbiAgICAvKipcbiAgICAgKiAgVGhlIGFkZHJlc3Mgb2YgdGhlIHVzZXIuXG4gICAgICovXG4gICAgdXNlclB1YmtleTogc3RyaW5nLFxuICAgIC8qKlxuICAgICAqICAnZWQyNTUxOScgZm9yIFNvbGFuYSB1c2VycywgJ2V0aGVycycgZm9yIEVWTSB1c2Vycy5cbiAgICAgKi9cbiAgICBjaXBoZXJzdWl0ZTogc3RyaW5nLFxuICAgIC8qKlxuICAgICAqICBUaGUgTXJFbmNsYXZlIHZhbHVlIHRvIGFkZC5cbiAgICAgKi9cbiAgICBtckVuY2xhdmU6IHN0cmluZyxcbiAgICAvKipcbiAgICAgKiAgVGhlIG5hbWVzIG9mIHRoZSBzZWNyZXRzIHRvIHdoaXRlbGlzdCB0aGUgTXJFbmNsYXZlIHZhbHVlIGZvci5cbiAgICAgKi9cbiAgICBzZWNyZXROYW1lczogc3RyaW5nW10sXG4gICAgLyoqXG4gICAgICogIFRoZSB0aW1lc3RhbXAgdGhhdCB0aGlzIHJlcXVlc3QgZXhwaXJlcy5cbiAgICAgKlxuICAgICAqICBEZWZhdWx0OiBub3cgKyAzMCBzZWNvbmRzLlxuICAgICAqL1xuICAgIGV4cGlyeVRpbWVzdGFtcCA9IGdldERlZmF1bHRSZXF1ZXN0VGltZXN0YW1wKClcbiAgKTogQWRkTXJFbmNsYXZlUGF5bG9hZCB7XG4gICAgcmV0dXJuIG5ldyBBZGRNckVuY2xhdmVQYXlsb2FkKFxuICAgICAgdXNlclB1YmtleSxcbiAgICAgIGNpcGhlcnN1aXRlLFxuICAgICAgbXJFbmNsYXZlLFxuICAgICAgc2VjcmV0TmFtZXMsXG4gICAgICBleHBpcnlUaW1lc3RhbXBcbiAgICApO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGFkZE1yRW5jbGF2ZShyZXF1ZXN0OiBBZGRNckVuY2xhdmVQYXlsb2FkLCBzaWduYXR1cmU6IHN0cmluZykge1xuICAgIGNvbnN0IHVybCA9IGAke3RoaXMudXJsfS9tcmVuY2xhdmUvd2hpdGVsaXN0YDtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybCwge1xuICAgICAgbWV0aG9kOiBcIlBVVFwiLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgICAgXCJYLVNpZ25lZC1IZWFkZXJcIjogc2lnbmF0dXJlLFxuICAgICAgfSxcbiAgICAgIGJvZHk6IHJlcXVlc3QudG9TdHJpbmcoKSxcbiAgICB9KTtcbiAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYGFkZE1yRW5jbGF2ZSBmYWlsZWQ6ICR7cmVzcG9uc2Uuc3RhdHVzVGV4dH1gKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgY3JlYXRlUmVtb3ZlTXJFbmNsYXZlUmVxdWVzdChcbiAgICAvKipcbiAgICAgKiAgVGhlIGFkZHJlc3Mgb2YgdGhlIHVzZXIuXG4gICAgICovXG4gICAgdXNlclB1YmtleTogc3RyaW5nLFxuICAgIC8qKlxuICAgICAqICAnZWQyNTUxOScgZm9yIFNvbGFuYSB1c2VycywgJ2V0aGVycycgZm9yIEVWTSB1c2Vycy5cbiAgICAgKi9cbiAgICBjaXBoZXJzdWl0ZTogc3RyaW5nLFxuICAgIC8qKlxuICAgICAqICBUaGUgbXJFbmNsYXZlIHZhbHVlIHRvIHJlbW92ZS5cbiAgICAgKi9cbiAgICBtckVuY2xhdmU6IHN0cmluZyxcbiAgICAvKipcbiAgICAgKiAgVGhlIHRpbWVzdGFtcCB0aGF0IHRoaXMgcmVxdWVzdCBleHBpcmVzLlxuICAgICAqXG4gICAgICogIERlZmF1bHQ6IG5vdyArIDMwIHNlY29uZHMuXG4gICAgICovXG4gICAgZXhwaXJ5VGltZXN0YW1wID0gZ2V0RGVmYXVsdFJlcXVlc3RUaW1lc3RhbXAoKVxuICApOiBSZW1vdmVNckVuY2xhdmVQYXlsb2FkIHtcbiAgICByZXR1cm4gbmV3IFJlbW92ZU1yRW5jbGF2ZVBheWxvYWQoXG4gICAgICB1c2VyUHVia2V5LFxuICAgICAgY2lwaGVyc3VpdGUsXG4gICAgICBtckVuY2xhdmUsXG4gICAgICBleHBpcnlUaW1lc3RhbXBcbiAgICApO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIHJlbW92ZU1yRW5jbGF2ZShcbiAgICByZXF1ZXN0OiBSZW1vdmVNckVuY2xhdmVQYXlsb2FkLFxuICAgIHNpZ25hdHVyZTogc3RyaW5nXG4gICkge1xuICAgIGNvbnN0IHVybCA9IGAke3RoaXMudXJsfS9tcmVuY2xhdmUvd2hpdGVsaXN0YDtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybCwge1xuICAgICAgbWV0aG9kOiBcIlBVVFwiLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgICAgXCJYLVNpZ25lZC1IZWFkZXJcIjogc2lnbmF0dXJlLFxuICAgICAgfSxcbiAgICAgIGJvZHk6IHJlcXVlc3QudG9TdHJpbmcoKSxcbiAgICB9KTtcbiAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYHJlbW92ZU1yRW5jbGF2ZSBmYWlsZWQ6ICR7cmVzcG9uc2Uuc3RhdHVzVGV4dH1gKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgY3JlYXRlRGVsZXRlU2VjcmV0UmVxdWVzdChcbiAgICAvKipcbiAgICAgKiAgVGhlIGFkZHJlc3Mgb2YgdGhlIHVzZXIuXG4gICAgICovXG4gICAgdXNlclB1YmtleTogc3RyaW5nLFxuICAgIC8qKlxuICAgICAqICAnZWQyNTUxOScgZm9yIFNvbGFuYSB1c2VycywgJ2V0aGVycycgZm9yIEVWTSB1c2Vycy5cbiAgICAgKi9cbiAgICBjaXBoZXJzdWl0ZTogc3RyaW5nLFxuICAgIC8qKlxuICAgICAqICBUaGUgbmFtZSBmbyB0aGUgc2VjcmV0IHRvIGRlbGV0ZS5cbiAgICAgKi9cbiAgICBzZWNyZXROYW1lOiBzdHJpbmcsXG4gICAgLyoqXG4gICAgICogIFRoZSB0aW1lc3RhbXAgdGhhdCB0aGlzIHJlcXVlc3QgZXhwaXJlcy5cbiAgICAgKlxuICAgICAqICBEZWZhdWx0OiBub3cgKyAzMCBzZWNvbmRzLlxuICAgICAqL1xuICAgIGV4cGlyeVRpbWVzdGFtcCA9IGdldERlZmF1bHRSZXF1ZXN0VGltZXN0YW1wKClcbiAgKTogRGVsZXRlU2VjcmV0UGF5bG9hZCB7XG4gICAgcmV0dXJuIG5ldyBEZWxldGVTZWNyZXRQYXlsb2FkKFxuICAgICAgdXNlclB1YmtleSxcbiAgICAgIGNpcGhlcnN1aXRlLFxuICAgICAgc2VjcmV0TmFtZSxcbiAgICAgIGV4cGlyeVRpbWVzdGFtcFxuICAgICk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZGVsZXRlU2VjcmV0KHJlcXVlc3Q6IERlbGV0ZVNlY3JldFBheWxvYWQsIHNpZ25hdHVyZTogc3RyaW5nKSB7XG4gICAgY29uc3QgdXJsID0gYCR7dGhpcy51cmx9L3NlY3JldGA7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cmwsIHtcbiAgICAgIG1ldGhvZDogXCJERUxFVEVcIixcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICAgIFwiWC1TaWduZWQtSGVhZGVyXCI6IHNpZ25hdHVyZSxcbiAgICAgIH0sXG4gICAgICBib2R5OiByZXF1ZXN0LnRvU3RyaW5nKCksXG4gICAgfSk7XG4gICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBkZWxldGVTZWNyZXQgZmFpbGVkOiAke3Jlc3BvbnNlLnN0YXR1c1RleHR9YCk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVVwZGF0ZVVzZXJQYXlsb2FkIHtcbiAgdXNlcl9wdWJrZXk6IHN0cmluZztcbiAgY2lwaGVyc3VpdGU6IHN0cmluZztcbiAgY29udGFjdF9pbmZvOiBzdHJpbmc7XG4gIHRpbWVzdGFtcDogbnVtYmVyO1xufVxuXG5leHBvcnQgY2xhc3MgVXBkYXRlVXNlclBheWxvYWQgaW1wbGVtZW50cyBJVXBkYXRlVXNlclBheWxvYWQge1xuICBwdWJsaWMgY29uc3RydWN0b3IoXG4gICAgcmVhZG9ubHkgdXNlcl9wdWJrZXk6IHN0cmluZyxcbiAgICByZWFkb25seSBjaXBoZXJzdWl0ZTogc3RyaW5nLFxuICAgIHJlYWRvbmx5IGNvbnRhY3RfaW5mbzogc3RyaW5nLFxuICAgIHJlYWRvbmx5IHRpbWVzdGFtcDogbnVtYmVyXG4gICkge31cblxuICBwdWJsaWMgc3RhdGljIGZyb20ob2JqOiBJVXBkYXRlVXNlclBheWxvYWQpOiBVcGRhdGVVc2VyUGF5bG9hZCB7XG4gICAgcmV0dXJuIG5ldyBVcGRhdGVVc2VyUGF5bG9hZChcbiAgICAgIG9iai51c2VyX3B1YmtleSxcbiAgICAgIG9iai5jaXBoZXJzdWl0ZSxcbiAgICAgIG9iai5jb250YWN0X2luZm8sXG4gICAgICBvYmoudGltZXN0YW1wXG4gICAgKTtcbiAgfVxuXG4gIHB1YmxpYyB0b0pTT04oKTogSVVwZGF0ZVVzZXJQYXlsb2FkIHtcbiAgICByZXR1cm4ge1xuICAgICAgdXNlcl9wdWJrZXk6IHRoaXMudXNlcl9wdWJrZXksXG4gICAgICBjaXBoZXJzdWl0ZTogdGhpcy5jaXBoZXJzdWl0ZSxcbiAgICAgIGNvbnRhY3RfaW5mbzogdGhpcy5jb250YWN0X2luZm8sXG4gICAgICB0aW1lc3RhbXA6IHRoaXMudGltZXN0YW1wLFxuICAgIH07XG4gIH1cblxuICBwdWJsaWMgdG9TdHJpbmcoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodGhpcy50b0pTT04oKSk7XG4gIH1cblxuICBwdWJsaWMgdG9FbmNvZGVkTWVzc2FnZSgpOiBCdWZmZXIge1xuICAgIHJldHVybiBCdWZmZXIuZnJvbShcbiAgICAgIGNyZWF0ZUhhc2goXCJzaGEyNTZcIikudXBkYXRlKHRoaXMudG9TdHJpbmcoKSkuZGlnZXN0KFwiaGV4XCIpXG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElDcmVhdGVTZWNyZXRQYXlsb2FkIHtcbiAgdXNlcl9wdWJrZXk6IHN0cmluZztcbiAgY2lwaGVyc3VpdGU6IHN0cmluZztcbiAgc2VjcmV0X25hbWU6IHN0cmluZztcbiAgc2VjcmV0OiBzdHJpbmc7XG4gIHRpbWVzdGFtcDogbnVtYmVyO1xufVxuXG5leHBvcnQgY2xhc3MgQ3JlYXRlU2VjcmV0UGF5bG9hZCBpbXBsZW1lbnRzIElDcmVhdGVTZWNyZXRQYXlsb2FkIHtcbiAgcHVibGljIGNvbnN0cnVjdG9yKFxuICAgIHJlYWRvbmx5IHVzZXJfcHVia2V5OiBzdHJpbmcsXG4gICAgcmVhZG9ubHkgY2lwaGVyc3VpdGU6IHN0cmluZyxcbiAgICByZWFkb25seSBzZWNyZXRfbmFtZTogc3RyaW5nLFxuICAgIHJlYWRvbmx5IHNlY3JldDogc3RyaW5nLFxuICAgIHJlYWRvbmx5IHRpbWVzdGFtcDogbnVtYmVyXG4gICkge31cblxuICBwdWJsaWMgc3RhdGljIGZyb20ob2JqOiBJQ3JlYXRlU2VjcmV0UGF5bG9hZCk6IENyZWF0ZVNlY3JldFBheWxvYWQge1xuICAgIHJldHVybiBuZXcgQ3JlYXRlU2VjcmV0UGF5bG9hZChcbiAgICAgIG9iai51c2VyX3B1YmtleSxcbiAgICAgIG9iai5jaXBoZXJzdWl0ZSxcbiAgICAgIG9iai5zZWNyZXRfbmFtZSxcbiAgICAgIG9iai5zZWNyZXQsXG4gICAgICBvYmoudGltZXN0YW1wXG4gICAgKTtcbiAgfVxuXG4gIHB1YmxpYyB0b0pTT04oKTogSUNyZWF0ZVNlY3JldFBheWxvYWQge1xuICAgIHJldHVybiB7XG4gICAgICB1c2VyX3B1YmtleTogdGhpcy51c2VyX3B1YmtleSxcbiAgICAgIGNpcGhlcnN1aXRlOiB0aGlzLmNpcGhlcnN1aXRlLFxuICAgICAgc2VjcmV0OiB0aGlzLnNlY3JldCxcbiAgICAgIHNlY3JldF9uYW1lOiB0aGlzLnNlY3JldF9uYW1lLFxuICAgICAgdGltZXN0YW1wOiB0aGlzLnRpbWVzdGFtcCxcbiAgICB9O1xuICB9XG5cbiAgcHVibGljIHRvU3RyaW5nKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHRoaXMudG9KU09OKCkpO1xuICB9XG5cbiAgcHVibGljIHRvRW5jb2RlZE1lc3NhZ2UoKTogQnVmZmVyIHtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20oXG4gICAgICBjcmVhdGVIYXNoKFwic2hhMjU2XCIpLnVwZGF0ZSh0aGlzLnRvU3RyaW5nKCkpLmRpZ2VzdChcImhleFwiKVxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBJQWRkTXJFbmNsYXZlUGF5bG9hZCB7XG4gIHVzZXJfcHVia2V5OiBzdHJpbmc7XG4gIGNpcGhlcnN1aXRlOiBzdHJpbmc7XG4gIG1yX2VuY2xhdmU6IHN0cmluZztcbiAgc2VjcmV0X25hbWVzOiBzdHJpbmdbXTtcbiAgdGltZXN0YW1wOiBudW1iZXI7XG59XG5cbmV4cG9ydCBjbGFzcyBBZGRNckVuY2xhdmVQYXlsb2FkIGltcGxlbWVudHMgSUFkZE1yRW5jbGF2ZVBheWxvYWQge1xuICBwdWJsaWMgY29uc3RydWN0b3IoXG4gICAgcmVhZG9ubHkgdXNlcl9wdWJrZXk6IHN0cmluZyxcbiAgICByZWFkb25seSBjaXBoZXJzdWl0ZTogc3RyaW5nLFxuICAgIHJlYWRvbmx5IG1yX2VuY2xhdmU6IHN0cmluZyxcbiAgICByZWFkb25seSBzZWNyZXRfbmFtZXM6IHN0cmluZ1tdLFxuICAgIHJlYWRvbmx5IHRpbWVzdGFtcDogbnVtYmVyXG4gICkge31cblxuICBwdWJsaWMgc3RhdGljIGZyb20ob2JqOiBJQWRkTXJFbmNsYXZlUGF5bG9hZCk6IEFkZE1yRW5jbGF2ZVBheWxvYWQge1xuICAgIHJldHVybiBuZXcgQWRkTXJFbmNsYXZlUGF5bG9hZChcbiAgICAgIG9iai51c2VyX3B1YmtleSxcbiAgICAgIG9iai5jaXBoZXJzdWl0ZSxcbiAgICAgIG9iai5tcl9lbmNsYXZlLFxuICAgICAgb2JqLnNlY3JldF9uYW1lcyxcbiAgICAgIG9iai50aW1lc3RhbXBcbiAgICApO1xuICB9XG5cbiAgcHVibGljIHRvSlNPTigpOiBJQWRkTXJFbmNsYXZlUGF5bG9hZCB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHVzZXJfcHVia2V5OiB0aGlzLnVzZXJfcHVia2V5LFxuICAgICAgY2lwaGVyc3VpdGU6IHRoaXMuY2lwaGVyc3VpdGUsXG4gICAgICBtcl9lbmNsYXZlOiB0aGlzLm1yX2VuY2xhdmUsXG4gICAgICBzZWNyZXRfbmFtZXM6IHRoaXMuc2VjcmV0X25hbWVzLFxuICAgICAgdGltZXN0YW1wOiB0aGlzLnRpbWVzdGFtcCxcbiAgICB9O1xuICB9XG5cbiAgcHVibGljIHRvU3RyaW5nKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHRoaXMudG9KU09OKCkpO1xuICB9XG5cbiAgcHVibGljIHRvRW5jb2RlZE1lc3NhZ2UoKTogQnVmZmVyIHtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20oXG4gICAgICBjcmVhdGVIYXNoKFwic2hhMjU2XCIpLnVwZGF0ZSh0aGlzLnRvU3RyaW5nKCkpLmRpZ2VzdChcImhleFwiKVxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBJUmVtb3ZlTXJFbmNsYXZlUGF5bG9hZCB7XG4gIHVzZXJfcHVia2V5OiBzdHJpbmc7XG4gIGNpcGhlcnN1aXRlOiBzdHJpbmc7XG4gIG1yX2VuY2xhdmU6IHN0cmluZztcbiAgdGltZXN0YW1wOiBudW1iZXI7XG59XG5cbmV4cG9ydCBjbGFzcyBSZW1vdmVNckVuY2xhdmVQYXlsb2FkIGltcGxlbWVudHMgSVJlbW92ZU1yRW5jbGF2ZVBheWxvYWQge1xuICBwdWJsaWMgY29uc3RydWN0b3IoXG4gICAgcmVhZG9ubHkgdXNlcl9wdWJrZXk6IHN0cmluZyxcbiAgICByZWFkb25seSBjaXBoZXJzdWl0ZTogc3RyaW5nLFxuICAgIHJlYWRvbmx5IG1yX2VuY2xhdmU6IHN0cmluZyxcbiAgICByZWFkb25seSB0aW1lc3RhbXA6IG51bWJlclxuICApIHt9XG5cbiAgcHVibGljIHN0YXRpYyBmcm9tKG9iajogSVJlbW92ZU1yRW5jbGF2ZVBheWxvYWQpOiBSZW1vdmVNckVuY2xhdmVQYXlsb2FkIHtcbiAgICByZXR1cm4gbmV3IFJlbW92ZU1yRW5jbGF2ZVBheWxvYWQoXG4gICAgICBvYmoudXNlcl9wdWJrZXksXG4gICAgICBvYmouY2lwaGVyc3VpdGUsXG4gICAgICBvYmoubXJfZW5jbGF2ZSxcbiAgICAgIG9iai50aW1lc3RhbXBcbiAgICApO1xuICB9XG5cbiAgcHVibGljIHRvSlNPTigpOiBJUmVtb3ZlTXJFbmNsYXZlUGF5bG9hZCB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHVzZXJfcHVia2V5OiB0aGlzLnVzZXJfcHVia2V5LFxuICAgICAgY2lwaGVyc3VpdGU6IHRoaXMuY2lwaGVyc3VpdGUsXG4gICAgICBtcl9lbmNsYXZlOiB0aGlzLm1yX2VuY2xhdmUsXG4gICAgICB0aW1lc3RhbXA6IHRoaXMudGltZXN0YW1wLFxuICAgIH07XG4gIH1cblxuICBwdWJsaWMgdG9TdHJpbmcoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodGhpcy50b0pTT04oKSk7XG4gIH1cblxuICBwdWJsaWMgdG9FbmNvZGVkTWVzc2FnZSgpOiBCdWZmZXIge1xuICAgIHJldHVybiBCdWZmZXIuZnJvbShcbiAgICAgIGNyZWF0ZUhhc2goXCJzaGEyNTZcIikudXBkYXRlKHRoaXMudG9TdHJpbmcoKSkuZGlnZXN0KFwiaGV4XCIpXG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElEZWxldGVTZWNyZXRQYXlsb2FkIHtcbiAgdXNlcl9wdWJrZXk6IHN0cmluZztcbiAgY2lwaGVyc3VpdGU6IHN0cmluZztcbiAgc2VjcmV0X25hbWU6IHN0cmluZztcbiAgdGltZXN0YW1wOiBudW1iZXI7XG59XG5cbmV4cG9ydCBjbGFzcyBEZWxldGVTZWNyZXRQYXlsb2FkIGltcGxlbWVudHMgSURlbGV0ZVNlY3JldFBheWxvYWQge1xuICBwdWJsaWMgY29uc3RydWN0b3IoXG4gICAgcmVhZG9ubHkgdXNlcl9wdWJrZXk6IHN0cmluZyxcbiAgICByZWFkb25seSBjaXBoZXJzdWl0ZTogc3RyaW5nLFxuICAgIHJlYWRvbmx5IHNlY3JldF9uYW1lOiBzdHJpbmcsXG4gICAgcmVhZG9ubHkgdGltZXN0YW1wOiBudW1iZXJcbiAgKSB7fVxuXG4gIHB1YmxpYyBzdGF0aWMgZnJvbShvYmo6IElEZWxldGVTZWNyZXRQYXlsb2FkKTogRGVsZXRlU2VjcmV0UGF5bG9hZCB7XG4gICAgcmV0dXJuIG5ldyBEZWxldGVTZWNyZXRQYXlsb2FkKFxuICAgICAgb2JqLnVzZXJfcHVia2V5LFxuICAgICAgb2JqLmNpcGhlcnN1aXRlLFxuICAgICAgb2JqLnNlY3JldF9uYW1lLFxuICAgICAgb2JqLnRpbWVzdGFtcFxuICAgICk7XG4gIH1cblxuICBwdWJsaWMgdG9KU09OKCk6IElEZWxldGVTZWNyZXRQYXlsb2FkIHtcbiAgICByZXR1cm4ge1xuICAgICAgdXNlcl9wdWJrZXk6IHRoaXMudXNlcl9wdWJrZXksXG4gICAgICBjaXBoZXJzdWl0ZTogdGhpcy5jaXBoZXJzdWl0ZSxcbiAgICAgIHNlY3JldF9uYW1lOiB0aGlzLnNlY3JldF9uYW1lLFxuICAgICAgdGltZXN0YW1wOiB0aGlzLnRpbWVzdGFtcCxcbiAgICB9O1xuICB9XG5cbiAgcHVibGljIHRvU3RyaW5nKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHRoaXMudG9KU09OKCkpO1xuICB9XG5cbiAgcHVibGljIHRvRW5jb2RlZE1lc3NhZ2UoKTogQnVmZmVyIHtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20oXG4gICAgICBjcmVhdGVIYXNoKFwic2hhMjU2XCIpLnVwZGF0ZSh0aGlzLnRvU3RyaW5nKCkpLmRpZ2VzdChcImhleFwiKVxuICAgICk7XG4gIH1cbn1cbiJdfQ==