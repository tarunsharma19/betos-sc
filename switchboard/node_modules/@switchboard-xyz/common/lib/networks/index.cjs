"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SWITCHBOARD_SUI_TESTNET_CONFIG = exports.SWITCHBOARD_SUI_MAINNET_CONFIG = exports.sui = exports.SWITCHBOARD_SOLANA_MAINNET_CONFIG = exports.SWITCHBOARD_SOLANA_DEVNET_CONFIG = exports.solana = exports.SWITCHBOARD_OPTIMISM_TESTNET_CONFIG = exports.SWITCHBOARD_OPTIMISM_MAINNET_CONFIG = exports.optimism = exports.SWITCHBOARD_NEAR_TESTNET_CONFIG = exports.SWITCHBOARD_NEAR_MAINNET_CONFIG = exports.near = exports.SWITCHBOARD_ETHEREUM_TESTNET_CONFIG = exports.SWITCHBOARD_ETHEREUM_MAINNET_CONFIG = exports.ethereum = exports.SWITCHBOARD_COREDAO_TESTNET_CONFIG = exports.SWITCHBOARD_COREDAO_MAINNET_CONFIG = exports.coredao = exports.SWITCHBOARD_BASE_TESTNET_CONFIG = exports.SWITCHBOARD_BASE_MAINNET_CONFIG = exports.base = exports.SWITCHBOARD_AURORA_TESTNET_CONFIG = exports.SWITCHBOARD_AURORA_MAINNET_CONFIG = exports.aurora = exports.SWITCHBOARD_ARBITRUM_TESTNET_CONFIG = exports.SWITCHBOARD_ARBITRUM_MAINNET_CONFIG = exports.arbitrum = exports.SWITCHBOARD_APTOS_TESTNET_CONFIG = exports.SWITCHBOARD_APTOS_MAINNET_CONFIG = exports.aptos = exports.getSupportedChain = exports.isSupportedChain = exports.SWITCHBOARD_NETWORKS = exports.getSupportedEvmChainId = exports.isSupportedChainId = exports.SWITCHBOARD_EVM_CHAIN_IDS = exports.getSupportedEvmChain = exports.isSupportedEvmChain = exports.SWITCHBOARD_EVM_NETWORKS = void 0;
const aptos_js_1 = require("./aptos.cjs");
const arbitrum_js_1 = require("./arbitrum.cjs");
const aurora_js_1 = require("./aurora.cjs");
const base_js_1 = require("./base.cjs");
const coredao_js_1 = require("./coredao.cjs");
const ethereum_js_1 = require("./ethereum.cjs");
const near_js_1 = require("./near.cjs");
const optimism_js_1 = require("./optimism.cjs");
const solana_js_1 = require("./solana.cjs");
const starknet_js_1 = require("./starknet.cjs");
const sui_js_1 = require("./sui.cjs");
const types_js_1 = require("./types.cjs");
/**
The default network configurations for each supported EVM chain.

```json
{
  "arbitrum": {
    "mainnet": {},
    "testnet": {}
  },
  "aurora": {
    "mainnet": {},
    "testnet": {}
  },
  "base": {
    "mainnet": {},
    "testnet": {}
  },
  "coredao": {
    "mainnet": {},
    "testnet": {}
  },
  "ethereum": {
    "mainnet": {},
    "testnet": {}
  },
  "optimism": {
    "mainnet": {},
    "testnet": {}
  }
}
```
 */
exports.SWITCHBOARD_EVM_NETWORKS = {
    arbitrum: arbitrum_js_1.SWITCHBOARD_ARBITRUM_CONFIG,
    base: base_js_1.SWITCHBOARD_BASE_CONFIG,
    coredao: coredao_js_1.SWITCHBOARD_COREDAO_CONFIG,
    ethereum: ethereum_js_1.SWITCHBOARD_ETHEREUM_CONFIG,
    optimism: optimism_js_1.SWITCHBOARD_OPTIMISM_CONFIG,
    aurora: aurora_js_1.SWITCHBOARD_AURORA_CONFIG,
};
/** Type assertion for whether a given EVM chain is supported on the Switchboard Network. */
function isSupportedEvmChain(chain) {
    return types_js_1.SWITCHBOARD_EVM_CHAINS.includes(chain);
}
exports.isSupportedEvmChain = isSupportedEvmChain;
function getSupportedEvmChain(chain) {
    if (!isSupportedEvmChain(chain)) {
        throw new Error(`The provided chain '${chain}' is not yet supported by the Switchboard network. Available chains are: [${types_js_1.SWITCHBOARD_EVM_CHAINS.map((c) => "'" + c + "'").join(", ")}]`);
    }
    return exports.SWITCHBOARD_EVM_NETWORKS[chain];
}
exports.getSupportedEvmChain = getSupportedEvmChain;
/**
The default network configurations for each supported EVM chain.

```json
{
  42161: {
    "networkName": "Mainnet",
    "programId": "0xd54579539E1334E856b983745DA26BEc3efB3C4D",
    "attestationService": "0x316fBe540C719970E6427ccD8590d7E0a2814C5D",
    "authority": "0x127f24013CaADF770F4b514c86344dD4f38d80c2",
    "metadata": {
      "defaultRpcUrl": "https://arb1.arbitrum.io/rpc",
      "defaultExplorer": "https://arbiscan.io",
      "chainId": 42161
    },
  421613: {},
  1116: {},
  1115: {},
}
```
 */
exports.SWITCHBOARD_EVM_CHAIN_IDS = {
    1: ethereum_js_1.SWITCHBOARD_ETHEREUM_MAINNET_CONFIG,
    5: ethereum_js_1.SWITCHBOARD_ETHEREUM_TESTNET_CONFIG,
    10: optimism_js_1.SWITCHBOARD_OPTIMISM_MAINNET_CONFIG,
    420: optimism_js_1.SWITCHBOARD_OPTIMISM_TESTNET_CONFIG,
    8453: base_js_1.SWITCHBOARD_BASE_MAINNET_CONFIG,
    84531: base_js_1.SWITCHBOARD_BASE_TESTNET_CONFIG,
    42161: arbitrum_js_1.SWITCHBOARD_ARBITRUM_MAINNET_CONFIG,
    421613: arbitrum_js_1.SWITCHBOARD_ARBITRUM_TESTNET_CONFIG,
    421614: arbitrum_js_1.SWITCHBOARD_ARBITRUM_SEPOLIA_CONFIG,
    1116: coredao_js_1.SWITCHBOARD_COREDAO_MAINNET_CONFIG,
    1115: coredao_js_1.SWITCHBOARD_COREDAO_TESTNET_CONFIG,
    1313161555: aurora_js_1.SWITCHBOARD_AURORA_TESTNET_CONFIG,
    1313161554: aurora_js_1.SWITCHBOARD_AURORA_MAINNET_CONFIG,
};
function isSupportedChainId(chainId) {
    return types_js_1.SUPPORTED_EVM_CHAIN_IDS.includes(chainId);
}
exports.isSupportedChainId = isSupportedChainId;
function getSupportedEvmChainId(chainId) {
    if (!isSupportedChainId(chainId)) {
        throw new Error(`The provided chainID '${chainId}' is not yet supported by the Switchboard network. Available chainID's are: [${types_js_1.SUPPORTED_EVM_CHAIN_IDS.map((c) => "'" + c + "'").join(", ")}]`);
    }
    return exports.SWITCHBOARD_EVM_CHAIN_IDS[chainId];
}
exports.getSupportedEvmChainId = getSupportedEvmChainId;
/**
The default network configurations for each supported chain.

```json
{
  "aptos": {
    "mainnet": {},
    "testnet": {}
  },
  "near": {
    "mainnet": {},
    "testnet": {}
  },
  "solana": {
    "mainnet": {},
    "devnet": {}
  },
  "sui": {
    "mainnet": {},
    "testnet": {}
  },
  "arbitrum": {
    "mainnet": {},
    "testnet": {}
  },
  "coredao": {
    "mainnet": {},
    "testnet": {}
  },
}
```
 */
exports.SWITCHBOARD_NETWORKS = {
    aptos: aptos_js_1.SWITCHBOARD_APTOS_CONFIG,
    near: near_js_1.SWITCHBOARD_NEAR_CONFIG,
    solana: solana_js_1.SWITCHBOARD_SOLANA_CONFIG,
    starknet: starknet_js_1.SWITCHBOARD_STARKNET_CONFIG,
    sui: sui_js_1.SWITCHBOARD_SUI_CONFIG,
    ...exports.SWITCHBOARD_EVM_NETWORKS,
};
/** Type assertion for whether a given chain is supported on the Switchboard Network. */
function isSupportedChain(chain) {
    return types_js_1.SWITCHBOARD_CHAINS.includes(chain);
}
exports.isSupportedChain = isSupportedChain;
function getSupportedChain(chain) {
    if (!isSupportedChain(chain)) {
        throw new Error(`The provided chain '${chain}' is not yet supported by the Switchboard network. Available chains are: [${types_js_1.SWITCHBOARD_CHAINS.map((c) => "'" + c + "'").join(", ")}]`);
    }
    return exports.SWITCHBOARD_NETWORKS[chain];
}
exports.getSupportedChain = getSupportedChain;
var aptos_js_2 = require("./aptos.cjs");
Object.defineProperty(exports, "aptos", { enumerable: true, get: function () { return aptos_js_2.SWITCHBOARD_APTOS_CONFIG; } });
Object.defineProperty(exports, "SWITCHBOARD_APTOS_MAINNET_CONFIG", { enumerable: true, get: function () { return aptos_js_2.SWITCHBOARD_APTOS_MAINNET_CONFIG; } });
Object.defineProperty(exports, "SWITCHBOARD_APTOS_TESTNET_CONFIG", { enumerable: true, get: function () { return aptos_js_2.SWITCHBOARD_APTOS_TESTNET_CONFIG; } });
var arbitrum_js_2 = require("./arbitrum.cjs");
Object.defineProperty(exports, "arbitrum", { enumerable: true, get: function () { return arbitrum_js_2.SWITCHBOARD_ARBITRUM_CONFIG; } });
Object.defineProperty(exports, "SWITCHBOARD_ARBITRUM_MAINNET_CONFIG", { enumerable: true, get: function () { return arbitrum_js_2.SWITCHBOARD_ARBITRUM_MAINNET_CONFIG; } });
Object.defineProperty(exports, "SWITCHBOARD_ARBITRUM_TESTNET_CONFIG", { enumerable: true, get: function () { return arbitrum_js_2.SWITCHBOARD_ARBITRUM_TESTNET_CONFIG; } });
var aurora_js_2 = require("./aurora.cjs");
Object.defineProperty(exports, "aurora", { enumerable: true, get: function () { return aurora_js_2.SWITCHBOARD_AURORA_CONFIG; } });
Object.defineProperty(exports, "SWITCHBOARD_AURORA_MAINNET_CONFIG", { enumerable: true, get: function () { return aurora_js_2.SWITCHBOARD_AURORA_MAINNET_CONFIG; } });
Object.defineProperty(exports, "SWITCHBOARD_AURORA_TESTNET_CONFIG", { enumerable: true, get: function () { return aurora_js_2.SWITCHBOARD_AURORA_TESTNET_CONFIG; } });
var base_js_2 = require("./base.cjs");
Object.defineProperty(exports, "base", { enumerable: true, get: function () { return base_js_2.SWITCHBOARD_BASE_CONFIG; } });
Object.defineProperty(exports, "SWITCHBOARD_BASE_MAINNET_CONFIG", { enumerable: true, get: function () { return base_js_2.SWITCHBOARD_BASE_MAINNET_CONFIG; } });
Object.defineProperty(exports, "SWITCHBOARD_BASE_TESTNET_CONFIG", { enumerable: true, get: function () { return base_js_2.SWITCHBOARD_BASE_TESTNET_CONFIG; } });
var coredao_js_2 = require("./coredao.cjs");
Object.defineProperty(exports, "coredao", { enumerable: true, get: function () { return coredao_js_2.SWITCHBOARD_COREDAO_CONFIG; } });
Object.defineProperty(exports, "SWITCHBOARD_COREDAO_MAINNET_CONFIG", { enumerable: true, get: function () { return coredao_js_2.SWITCHBOARD_COREDAO_MAINNET_CONFIG; } });
Object.defineProperty(exports, "SWITCHBOARD_COREDAO_TESTNET_CONFIG", { enumerable: true, get: function () { return coredao_js_2.SWITCHBOARD_COREDAO_TESTNET_CONFIG; } });
var ethereum_js_2 = require("./ethereum.cjs");
Object.defineProperty(exports, "ethereum", { enumerable: true, get: function () { return ethereum_js_2.SWITCHBOARD_ETHEREUM_CONFIG; } });
Object.defineProperty(exports, "SWITCHBOARD_ETHEREUM_MAINNET_CONFIG", { enumerable: true, get: function () { return ethereum_js_2.SWITCHBOARD_ETHEREUM_MAINNET_CONFIG; } });
Object.defineProperty(exports, "SWITCHBOARD_ETHEREUM_TESTNET_CONFIG", { enumerable: true, get: function () { return ethereum_js_2.SWITCHBOARD_ETHEREUM_TESTNET_CONFIG; } });
var near_js_2 = require("./near.cjs");
Object.defineProperty(exports, "near", { enumerable: true, get: function () { return near_js_2.SWITCHBOARD_NEAR_CONFIG; } });
Object.defineProperty(exports, "SWITCHBOARD_NEAR_MAINNET_CONFIG", { enumerable: true, get: function () { return near_js_2.SWITCHBOARD_NEAR_MAINNET_CONFIG; } });
Object.defineProperty(exports, "SWITCHBOARD_NEAR_TESTNET_CONFIG", { enumerable: true, get: function () { return near_js_2.SWITCHBOARD_NEAR_TESTNET_CONFIG; } });
var optimism_js_2 = require("./optimism.cjs");
Object.defineProperty(exports, "optimism", { enumerable: true, get: function () { return optimism_js_2.SWITCHBOARD_OPTIMISM_CONFIG; } });
Object.defineProperty(exports, "SWITCHBOARD_OPTIMISM_MAINNET_CONFIG", { enumerable: true, get: function () { return optimism_js_2.SWITCHBOARD_OPTIMISM_MAINNET_CONFIG; } });
Object.defineProperty(exports, "SWITCHBOARD_OPTIMISM_TESTNET_CONFIG", { enumerable: true, get: function () { return optimism_js_2.SWITCHBOARD_OPTIMISM_TESTNET_CONFIG; } });
var solana_js_2 = require("./solana.cjs");
Object.defineProperty(exports, "solana", { enumerable: true, get: function () { return solana_js_2.SWITCHBOARD_SOLANA_CONFIG; } });
Object.defineProperty(exports, "SWITCHBOARD_SOLANA_DEVNET_CONFIG", { enumerable: true, get: function () { return solana_js_2.SWITCHBOARD_SOLANA_DEVNET_CONFIG; } });
Object.defineProperty(exports, "SWITCHBOARD_SOLANA_MAINNET_CONFIG", { enumerable: true, get: function () { return solana_js_2.SWITCHBOARD_SOLANA_MAINNET_CONFIG; } });
var sui_js_2 = require("./sui.cjs");
Object.defineProperty(exports, "sui", { enumerable: true, get: function () { return sui_js_2.SWITCHBOARD_SUI_CONFIG; } });
Object.defineProperty(exports, "SWITCHBOARD_SUI_MAINNET_CONFIG", { enumerable: true, get: function () { return sui_js_2.SWITCHBOARD_SUI_MAINNET_CONFIG; } });
Object.defineProperty(exports, "SWITCHBOARD_SUI_TESTNET_CONFIG", { enumerable: true, get: function () { return sui_js_2.SWITCHBOARD_SUI_TESTNET_CONFIG; } });
__exportStar(require("./types.cjs"), exports);
exports.default = exports.SWITCHBOARD_NETWORKS;
//# sourceMappingURL=data:application/json;base64,