"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateEntrypoints = exports.moveCjsFilesAsync = exports.moveCjsFiles = void 0;
const fs_1 = __importDefault(require("fs"));
const promises_1 = __importDefault(require("fs/promises"));
const node_path_1 = require("node:path");
/**
 * Merge a dist-cjs directory into a dist directory
 * @param {string} source - the absolute path to the source directory (Ex. /home/runner/dist-cjs)
 * @param {string} dest - the absolte path to the destination directory (Ex. /home/runner/dist)
 */
function moveCjsFiles(source, dest) {
    const files = fs_1.default.readdirSync(source, { withFileTypes: true });
    for (const file of files) {
        if (file.isDirectory()) {
            fs_1.default.mkdirSync((0, node_path_1.join)(source, file.name), { recursive: true });
            moveCjsFiles((0, node_path_1.join)(source, file.name), (0, node_path_1.join)(dest, file.name));
        }
        else if (file.isFile()) {
            const parsed = (0, node_path_1.parse)(file.name);
            // Ignore anything that's not a .js file
            if (parsed.ext !== ".js") {
                continue;
            }
            // Rewrite any require statements to use .cjs
            const content = fs_1.default.readFileSync((0, node_path_1.join)(source, file.name), "utf8");
            const rewritten = content.replace(/require\("(\..+?).js"\)/g, (_, p1) => {
                return `require("${p1}.cjs")`;
            });
            // Rename the file to .cjs
            const renamed = (0, node_path_1.format)({ name: parsed.name, ext: ".cjs" });
            // console.log(renamed);
            fs_1.default.writeFileSync((0, node_path_1.join)(dest, renamed), rewritten, "utf8");
        }
    }
}
exports.moveCjsFiles = moveCjsFiles;
/**
 * Merge a dist-cjs directory into a dist directory
 * @param {string} source - the absolute path to the source directory (Ex. /home/runner/dist-cjs)
 * @param {string} dest - the absolte path to the destination directory (Ex. /home/runner/dist)
 */
async function moveCjsFilesAsync(source, dest) {
    const files = await promises_1.default.readdir(source, { withFileTypes: true });
    await Promise.all(files.map(async (file) => {
        if (file.isDirectory()) {
            return await moveCjsFiles((0, node_path_1.join)(source, file.name), (0, node_path_1.join)(dest, file.name));
        }
        // its a file
        const parsed = (0, node_path_1.parse)(file.name);
        if (parsed.ext !== ".js") {
            return;
        }
        return await promises_1.default
            .readFile((0, node_path_1.join)(source, file.name), "utf-8")
            .then(async (content) => {
            const rewritten = content.replace(/require\("(\..+?).js"\)/g, (_, p1) => {
                return `require("${p1}.cjs")`;
            });
            const renamed = (0, node_path_1.format)({ name: parsed.name, ext: ".cjs" });
            return await promises_1.default.writeFile((0, node_path_1.join)(dest, renamed), rewritten, "utf-8");
        });
    }));
}
exports.moveCjsFilesAsync = moveCjsFilesAsync;
const updateJsonFile = (relativePath, updateFunction) => {
    const contents = fs_1.default.readFileSync(relativePath, "utf8");
    const res = updateFunction(JSON.parse(contents));
    fs_1.default.writeFileSync(relativePath, JSON.stringify(res, null, 2) + "\n");
};
const generateFiles = (entrypoints, dir) => {
    const files = [...Object.entries(entrypoints), ["index", "index"]].flatMap(([key, value]) => {
        const nrOfDots = key.split("/").length - 1;
        const relativePath = "../".repeat(nrOfDots) || "./";
        const compiledPath = `${relativePath}${dir}/${value}.js`;
        return [
            [
                `${key}.cjs`,
                `module.exports = require('${relativePath}${dir}/${value}.cjs');`,
            ],
            [`${key}.js`, `export * from '${compiledPath}'`],
            [`${key}.d.ts`, `export * from '${compiledPath}'`],
        ];
    });
    return Object.fromEntries(files);
};
/**
 * Generates the package.json and tsconfig entrypoints for an ESM/CJS build
 * @param {string} projectDir - the absolute path to a directory containing a package.json and tsconfig.json
 * @param {string} dir - the name of the output directory (Ex. dist)
 * @param {object} entrypoints - a list of entrypoints to their file location, relative to the projectDir
 * @param {boolean} includeSrcDir - whether to include the src directory in the package.json files
 */
function generateEntrypoints(projectDir, dir, entrypoints, includeSrcDir) {
    // Update tsconfig.json `typedocOptions.entryPoints` field
    updateJsonFile((0, node_path_1.join)(projectDir, "tsconfig.json"), (json) => ({
        ...json,
        typedocOptions: {
            ...json.typedocOptions,
            entryPoints: [...Object.keys(entrypoints)].map((key) => `src/${entrypoints[key]}.ts`),
        },
    }));
    const generatedFiles = generateFiles(entrypoints, dir);
    const filenames = Object.keys(generatedFiles);
    const baseFiles = [`${dir}/`];
    if (includeSrcDir) {
        baseFiles.push("src/");
    }
    // Update package.json `exports` and `files` fields
    updateJsonFile((0, node_path_1.join)(projectDir, "package.json"), (json) => ({
        ...json,
        exports: Object.assign(Object.fromEntries(["index", ...Object.keys(entrypoints)].map((key) => {
            const entryPoint = {
                types: `./${key}.d.ts`,
                import: `./${key}.js`,
                require: `./${key}.cjs`,
            };
            return [key === "index" ? "." : `./${key}`, entryPoint];
        })), { "./package.json": "./package.json" }),
        files: [...baseFiles, "package.json", ...filenames],
    }));
    // Write generated files
    Object.entries(generatedFiles).forEach(([filename, content]) => {
        fs_1.default.mkdirSync((0, node_path_1.dirname)(filename), { recursive: true });
        fs_1.default.writeFileSync(filename, content);
    });
    // Update .gitignore
    fs_1.default.writeFileSync((0, node_path_1.join)(projectDir, ".gitignore"), filenames.join("\n") + "\n");
}
exports.generateEntrypoints = generateEntrypoints;
//# sourceMappingURL=data:application/json;base64,