import SWITCHBOARD_NETWORKS from "../networks/index.js";
import { isSupportedChain } from "../networks/index.js";
import { SWITCHBOARD_CHAINS } from "../networks/types.js";
/**
 * Type assertion for whether the given chain is supported. Throws an error if Switchboard is not deployed on the target chain.
 * @param _chain - the target chain
 */
export const validateSupportedChain = (_chain) => {
    if (!isSupportedChain(_chain)) {
        const supportedChainsString = `'${SWITCHBOARD_CHAINS.slice(0, -1).join("', '")}', or '${SWITCHBOARD_CHAINS[SWITCHBOARD_CHAINS.length - 1]}'`;
        throw new Error(`chain ${_chain} is not supported, the currently supported chains are ${supportedChainsString}`);
    }
    return _chain;
};
/**
 * Return the chain config for a Switchboard implementation. Throws an error if Switchboard is not deployed on the target chain.
 * @param _chain - the target chain
 */
export const getSupportedChain = (_chain) => {
    const chain = validateSupportedChain(_chain);
    return SWITCHBOARD_NETWORKS[chain];
};
/**
 * Return the network config for a Switchboard deployment. Throws an error if Switchboard is not deployed on the target chain.
 * @param _chain - the target chain
 * @param _network - the target network
 */
export const getSupportedNetwork = (_chain, _network) => {
    const chain = validateSupportedChain(_chain);
    const chainConfig = SWITCHBOARD_NETWORKS[chain];
    if (chain === "solana") {
        if (_network !== "mainnet" && _network !== "devnet") {
            throw new Error(`UnsupportedNetwork: network needs to be 'mainnet' or 'devnet'`);
        }
        return chainConfig[_network];
    }
    if (chain === "starknet") {
        const supported = new Set(["goerli", "sepolia", "mainnet"]);
        if (supported.has(_network)) {
            const starknetNetwork = _network;
            return chainConfig[starknetNetwork];
        }
        throw new Error(`UnsupportedNetwork: '${_network}'`);
    }
    if (_network !== "mainnet" &&
        _network !== "testnet" &&
        _network !== "sepolia") {
        throw new Error(`UnsupportedNetwork: network needs to be 'mainnet', 'sepolia', or 'testnet'`);
    }
    return chainConfig[_network];
};
/**
 * Determines whether a given chain, network, and queue is managed by SwitchboardLabs
 * @param _chain - the target chain of the queue (Ex. solana or arbitrum)
 * @param _network - the target network of the queue (Ex. mainnet or testnet)
 * @param _queue - the address of the queue
 * @returns a boolean indicating whether the queue is operated by SwitchboardLabs
 */
export const isSwitchboardLabsQueue = (_chain, _network, _queue) => {
    try {
        const networkConfig = getSupportedNetwork(_chain, _network);
        for (const queue of networkConfig.queues) {
            if (queue.address === _queue) {
                return true;
            }
        }
    }
    catch { }
    return false;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmV0d29ya3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXRpbHMvbmV0d29ya3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxvQkFBb0IsTUFBTSxzQkFBc0IsQ0FBQztBQUN4RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQVN4RCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUUxRDs7O0dBR0c7QUFDSCxNQUFNLENBQUMsTUFBTSxzQkFBc0IsR0FBRyxDQUFDLE1BQWMsRUFBYSxFQUFFO0lBQ2xFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDO1FBQzlCLE1BQU0scUJBQXFCLEdBQUcsSUFBSSxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUNwRSxNQUFNLENBQ1AsVUFBVSxrQkFBa0IsQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQztRQUNoRSxNQUFNLElBQUksS0FBSyxDQUNiLFNBQVMsTUFBTSx5REFBeUQscUJBQXFCLEVBQUUsQ0FDaEcsQ0FBQztJQUNKLENBQUM7SUFDRCxPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDLENBQUM7QUFFRjs7O0dBR0c7QUFDSCxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRyxDQUFDLE1BQWMsRUFBZSxFQUFFO0lBQy9ELE1BQU0sS0FBSyxHQUFjLHNCQUFzQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3hELE9BQU8sb0JBQW9CLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDckMsQ0FBQyxDQUFDO0FBRUY7Ozs7R0FJRztBQUNILE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFHLENBQ2pDLE1BQWMsRUFDZCxRQUFnQixFQUNLLEVBQUU7SUFDdkIsTUFBTSxLQUFLLEdBQWMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDeEQsTUFBTSxXQUFXLEdBQWdCLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRTdELElBQUksS0FBSyxLQUFLLFFBQVEsRUFBRSxDQUFDO1FBQ3ZCLElBQUksUUFBUSxLQUFLLFNBQVMsSUFBSSxRQUFRLEtBQUssUUFBUSxFQUFFLENBQUM7WUFDcEQsTUFBTSxJQUFJLEtBQUssQ0FDYiwrREFBK0QsQ0FDaEUsQ0FBQztRQUNKLENBQUM7UUFDRCxPQUFRLFdBQTZCLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDbEQsQ0FBQztJQUVELElBQUksS0FBSyxLQUFLLFVBQVUsRUFBRSxDQUFDO1FBQ3pCLE1BQU0sU0FBUyxHQUFHLElBQUksR0FBRyxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDO1FBQzVELElBQUksU0FBUyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDO1lBQzVCLE1BQU0sZUFBZSxHQUFHLFFBQWlDLENBQUM7WUFDMUQsT0FBUSxXQUErQixDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQzNELENBQUM7UUFDRCxNQUFNLElBQUksS0FBSyxDQUFDLHdCQUF3QixRQUFRLEdBQUcsQ0FBQyxDQUFDO0lBQ3ZELENBQUM7SUFFRCxJQUNFLFFBQVEsS0FBSyxTQUFTO1FBQ3RCLFFBQVEsS0FBSyxTQUFTO1FBQ3RCLFFBQVEsS0FBSyxTQUFTLEVBQ3RCLENBQUM7UUFDRCxNQUFNLElBQUksS0FBSyxDQUNiLDRFQUE0RSxDQUM3RSxDQUFDO0lBQ0osQ0FBQztJQUVELE9BQVEsV0FBNEIsQ0FBQyxRQUFRLENBQUUsQ0FBQztBQUNsRCxDQUFDLENBQUM7QUFFRjs7Ozs7O0dBTUc7QUFDSCxNQUFNLENBQUMsTUFBTSxzQkFBc0IsR0FBRyxDQUNwQyxNQUFjLEVBQ2QsUUFBZ0IsRUFDaEIsTUFBYyxFQUNMLEVBQUU7SUFDWCxJQUFJLENBQUM7UUFDSCxNQUFNLGFBQWEsR0FBRyxtQkFBbUIsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDNUQsS0FBSyxNQUFNLEtBQUssSUFBSSxhQUFhLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDekMsSUFBSSxLQUFLLENBQUMsT0FBTyxLQUFLLE1BQU0sRUFBRSxDQUFDO2dCQUM3QixPQUFPLElBQUksQ0FBQztZQUNkLENBQUM7UUFDSCxDQUFDO0lBQ0gsQ0FBQztJQUFDLE1BQU0sQ0FBQyxDQUFBLENBQUM7SUFDVixPQUFPLEtBQUssQ0FBQztBQUNmLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBTV0lUQ0hCT0FSRF9ORVRXT1JLUyBmcm9tIFwiLi4vbmV0d29ya3MvaW5kZXguanNcIjtcbmltcG9ydCB7IGlzU3VwcG9ydGVkQ2hhaW4gfSBmcm9tIFwiLi4vbmV0d29ya3MvaW5kZXguanNcIjtcbmltcG9ydCB0eXBlIHtcbiAgQ2hhaW5Db25maWcsXG4gIENoYWluVHlwZSxcbiAgSUNoYWluQ29uZmlnLFxuICBJQ2hhaW5OZXR3b3JrQ29uZmlnLFxuICBJU29sYW5hQ29uZmlnLFxuICBJU3RhcmtuZXRDb25maWcsXG59IGZyb20gXCIuLi9uZXR3b3Jrcy90eXBlcy5qc1wiO1xuaW1wb3J0IHsgU1dJVENIQk9BUkRfQ0hBSU5TIH0gZnJvbSBcIi4uL25ldHdvcmtzL3R5cGVzLmpzXCI7XG5cbi8qKlxuICogVHlwZSBhc3NlcnRpb24gZm9yIHdoZXRoZXIgdGhlIGdpdmVuIGNoYWluIGlzIHN1cHBvcnRlZC4gVGhyb3dzIGFuIGVycm9yIGlmIFN3aXRjaGJvYXJkIGlzIG5vdCBkZXBsb3llZCBvbiB0aGUgdGFyZ2V0IGNoYWluLlxuICogQHBhcmFtIF9jaGFpbiAtIHRoZSB0YXJnZXQgY2hhaW5cbiAqL1xuZXhwb3J0IGNvbnN0IHZhbGlkYXRlU3VwcG9ydGVkQ2hhaW4gPSAoX2NoYWluOiBzdHJpbmcpOiBDaGFpblR5cGUgPT4ge1xuICBpZiAoIWlzU3VwcG9ydGVkQ2hhaW4oX2NoYWluKSkge1xuICAgIGNvbnN0IHN1cHBvcnRlZENoYWluc1N0cmluZyA9IGAnJHtTV0lUQ0hCT0FSRF9DSEFJTlMuc2xpY2UoMCwgLTEpLmpvaW4oXG4gICAgICBcIicsICdcIlxuICAgICl9Jywgb3IgJyR7U1dJVENIQk9BUkRfQ0hBSU5TW1NXSVRDSEJPQVJEX0NIQUlOUy5sZW5ndGggLSAxXX0nYDtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBgY2hhaW4gJHtfY2hhaW59IGlzIG5vdCBzdXBwb3J0ZWQsIHRoZSBjdXJyZW50bHkgc3VwcG9ydGVkIGNoYWlucyBhcmUgJHtzdXBwb3J0ZWRDaGFpbnNTdHJpbmd9YFxuICAgICk7XG4gIH1cbiAgcmV0dXJuIF9jaGFpbjtcbn07XG5cbi8qKlxuICogUmV0dXJuIHRoZSBjaGFpbiBjb25maWcgZm9yIGEgU3dpdGNoYm9hcmQgaW1wbGVtZW50YXRpb24uIFRocm93cyBhbiBlcnJvciBpZiBTd2l0Y2hib2FyZCBpcyBub3QgZGVwbG95ZWQgb24gdGhlIHRhcmdldCBjaGFpbi5cbiAqIEBwYXJhbSBfY2hhaW4gLSB0aGUgdGFyZ2V0IGNoYWluXG4gKi9cbmV4cG9ydCBjb25zdCBnZXRTdXBwb3J0ZWRDaGFpbiA9IChfY2hhaW46IHN0cmluZyk6IENoYWluQ29uZmlnID0+IHtcbiAgY29uc3QgY2hhaW46IENoYWluVHlwZSA9IHZhbGlkYXRlU3VwcG9ydGVkQ2hhaW4oX2NoYWluKTtcbiAgcmV0dXJuIFNXSVRDSEJPQVJEX05FVFdPUktTW2NoYWluXTtcbn07XG5cbi8qKlxuICogUmV0dXJuIHRoZSBuZXR3b3JrIGNvbmZpZyBmb3IgYSBTd2l0Y2hib2FyZCBkZXBsb3ltZW50LiBUaHJvd3MgYW4gZXJyb3IgaWYgU3dpdGNoYm9hcmQgaXMgbm90IGRlcGxveWVkIG9uIHRoZSB0YXJnZXQgY2hhaW4uXG4gKiBAcGFyYW0gX2NoYWluIC0gdGhlIHRhcmdldCBjaGFpblxuICogQHBhcmFtIF9uZXR3b3JrIC0gdGhlIHRhcmdldCBuZXR3b3JrXG4gKi9cbmV4cG9ydCBjb25zdCBnZXRTdXBwb3J0ZWROZXR3b3JrID0gKFxuICBfY2hhaW46IHN0cmluZyxcbiAgX25ldHdvcms6IHN0cmluZ1xuKTogSUNoYWluTmV0d29ya0NvbmZpZyA9PiB7XG4gIGNvbnN0IGNoYWluOiBDaGFpblR5cGUgPSB2YWxpZGF0ZVN1cHBvcnRlZENoYWluKF9jaGFpbik7XG4gIGNvbnN0IGNoYWluQ29uZmlnOiBDaGFpbkNvbmZpZyA9IFNXSVRDSEJPQVJEX05FVFdPUktTW2NoYWluXTtcblxuICBpZiAoY2hhaW4gPT09IFwic29sYW5hXCIpIHtcbiAgICBpZiAoX25ldHdvcmsgIT09IFwibWFpbm5ldFwiICYmIF9uZXR3b3JrICE9PSBcImRldm5ldFwiKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBVbnN1cHBvcnRlZE5ldHdvcms6IG5ldHdvcmsgbmVlZHMgdG8gYmUgJ21haW5uZXQnIG9yICdkZXZuZXQnYFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIChjaGFpbkNvbmZpZyBhcyBJU29sYW5hQ29uZmlnKVtfbmV0d29ya107XG4gIH1cblxuICBpZiAoY2hhaW4gPT09IFwic3RhcmtuZXRcIikge1xuICAgIGNvbnN0IHN1cHBvcnRlZCA9IG5ldyBTZXQoW1wiZ29lcmxpXCIsIFwic2Vwb2xpYVwiLCBcIm1haW5uZXRcIl0pO1xuICAgIGlmIChzdXBwb3J0ZWQuaGFzKF9uZXR3b3JrKSkge1xuICAgICAgY29uc3Qgc3RhcmtuZXROZXR3b3JrID0gX25ldHdvcmsgYXMga2V5b2YgSVN0YXJrbmV0Q29uZmlnO1xuICAgICAgcmV0dXJuIChjaGFpbkNvbmZpZyBhcyBJU3RhcmtuZXRDb25maWcpW3N0YXJrbmV0TmV0d29ya107XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWROZXR3b3JrOiAnJHtfbmV0d29ya30nYCk7XG4gIH1cblxuICBpZiAoXG4gICAgX25ldHdvcmsgIT09IFwibWFpbm5ldFwiICYmXG4gICAgX25ldHdvcmsgIT09IFwidGVzdG5ldFwiICYmXG4gICAgX25ldHdvcmsgIT09IFwic2Vwb2xpYVwiXG4gICkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGBVbnN1cHBvcnRlZE5ldHdvcms6IG5ldHdvcmsgbmVlZHMgdG8gYmUgJ21haW5uZXQnLCAnc2Vwb2xpYScsIG9yICd0ZXN0bmV0J2BcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIChjaGFpbkNvbmZpZyBhcyBJQ2hhaW5Db25maWcpW19uZXR3b3JrXSE7XG59O1xuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciBhIGdpdmVuIGNoYWluLCBuZXR3b3JrLCBhbmQgcXVldWUgaXMgbWFuYWdlZCBieSBTd2l0Y2hib2FyZExhYnNcbiAqIEBwYXJhbSBfY2hhaW4gLSB0aGUgdGFyZ2V0IGNoYWluIG9mIHRoZSBxdWV1ZSAoRXguIHNvbGFuYSBvciBhcmJpdHJ1bSlcbiAqIEBwYXJhbSBfbmV0d29yayAtIHRoZSB0YXJnZXQgbmV0d29yayBvZiB0aGUgcXVldWUgKEV4LiBtYWlubmV0IG9yIHRlc3RuZXQpXG4gKiBAcGFyYW0gX3F1ZXVlIC0gdGhlIGFkZHJlc3Mgb2YgdGhlIHF1ZXVlXG4gKiBAcmV0dXJucyBhIGJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIHRoZSBxdWV1ZSBpcyBvcGVyYXRlZCBieSBTd2l0Y2hib2FyZExhYnNcbiAqL1xuZXhwb3J0IGNvbnN0IGlzU3dpdGNoYm9hcmRMYWJzUXVldWUgPSAoXG4gIF9jaGFpbjogc3RyaW5nLFxuICBfbmV0d29yazogc3RyaW5nLFxuICBfcXVldWU6IHN0cmluZ1xuKTogYm9vbGVhbiA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgbmV0d29ya0NvbmZpZyA9IGdldFN1cHBvcnRlZE5ldHdvcmsoX2NoYWluLCBfbmV0d29yayk7XG4gICAgZm9yIChjb25zdCBxdWV1ZSBvZiBuZXR3b3JrQ29uZmlnLnF1ZXVlcykge1xuICAgICAgaWYgKHF1ZXVlLmFkZHJlc3MgPT09IF9xdWV1ZSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH0gY2F0Y2gge31cbiAgcmV0dXJuIGZhbHNlO1xufTtcbiJdfQ==