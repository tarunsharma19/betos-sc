"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PermissionAlreadyExists = exports.ResourceAlreadyExists = exports.AggregatorQueueNotReady = exports.AggregatorIllegalRoundOpenCall = exports.AggregatorInvalidUpdateDelay = exports.AggregatorInvalidMinOracleResults = exports.AggregatorInvalidBatchSize = exports.OracleWalletInsufficientCoin = exports.LeaseInsufficientCoin = exports.InsufficientCoin = exports.AggregatorLocked = exports.LeaseInactive = exports.CrankEmpty = exports.CrankNotReady = exports.InvalidArgument = exports.OracleAlreadyResponded = exports.JobsChecksumMismatch = exports.OracleMismatch = exports.CrankDisabled = exports.PermissionDenied = exports.InvalidAuthority = exports.OracleWalletAlreadyExists = exports.LeaseAlreadyExists = exports.AggregatorAlreadyExists = exports.CrankAlreadyExists = exports.JobAlreadyExists = exports.OracleAlreadyExists = exports.QueueAlreadyExists = exports.StateAlreadyExists = exports.OracleWalletNotFound = exports.LeaseNotFound = exports.AggregatorNotFound = exports.CrankNotFound = exports.JobNotFound = exports.OracleNotFound = exports.QueueNotFound = exports.StateNotFound = exports.Generic = exports.SwitchboardError = exports.SwitchboardErrorEnum = void 0;
var SwitchboardErrorEnum;
(function (SwitchboardErrorEnum) {
    SwitchboardErrorEnum["Generic"] = "Generic";
    SwitchboardErrorEnum["StateNotFound"] = "StateNotFound";
    SwitchboardErrorEnum["QueueNotFound"] = "QueueNotFound";
    SwitchboardErrorEnum["OracleNotFound"] = "OracleNotFound";
    SwitchboardErrorEnum["JobNotFound"] = "JobNotFound";
    SwitchboardErrorEnum["CrankNotFound"] = "CrankNotFound";
    SwitchboardErrorEnum["AggregatorNotFound"] = "AggregatorNotFound";
    SwitchboardErrorEnum["LeaseNotFound"] = "LeaseNotFound";
    SwitchboardErrorEnum["OracleWalletNotFound"] = "OracleWalletNotFound";
    SwitchboardErrorEnum["StateAlreadyExists"] = "StateAlreadyExists";
    SwitchboardErrorEnum["QueueAlreadyExists"] = "QueueAlreadyExists";
    SwitchboardErrorEnum["OracleAlreadyExists"] = "OracleAlreadyExists";
    SwitchboardErrorEnum["JobAlreadyExists"] = "JobAlreadyExists";
    SwitchboardErrorEnum["CrankAlreadyExists"] = "CrankAlreadyExists";
    SwitchboardErrorEnum["AggregatorAlreadyExists"] = "AggregatorAlreadyExists";
    SwitchboardErrorEnum["LeaseAlreadyExists"] = "LeaseAlreadyExists";
    SwitchboardErrorEnum["OracleWalletAlreadyExists"] = "OracleWalletAlreadyExists";
    SwitchboardErrorEnum["InvalidAuthority"] = "InvalidAuthority";
    SwitchboardErrorEnum["PermissionDenied"] = "PermissionDenied";
    SwitchboardErrorEnum["CrankDisabled"] = "CrankDisabled";
    SwitchboardErrorEnum["OracleMismatch"] = "OracleMismatch";
    SwitchboardErrorEnum["JobsChecksumMismatch"] = "JobsChecksumMismatch";
    SwitchboardErrorEnum["OracleAlreadyResponded"] = "OracleAlreadyResponded";
    SwitchboardErrorEnum["InvalidArgument"] = "InvalidArgument";
    SwitchboardErrorEnum["CrankNotReady"] = "CrankNotReady";
    SwitchboardErrorEnum["CrankEmpty"] = "CrankEmpty";
    SwitchboardErrorEnum["LeaseInactive"] = "LeaseInactive";
    SwitchboardErrorEnum["AggregatorLocked"] = "AggregatorLocked";
    SwitchboardErrorEnum["InsufficientCoin"] = "InsufficientCoin";
    SwitchboardErrorEnum["LeaseInsufficientCoin"] = "LeaseInsufficientCoin";
    SwitchboardErrorEnum["OracleWalletInsufficientCoin"] = "OracleWalletInsufficientCoin";
    SwitchboardErrorEnum["AggregatorInvalidBatchSize"] = "AggregatorInvalidBatchSize";
    SwitchboardErrorEnum["AggregatorInvalidMinOracleResults"] = "AggregatorInvalidMinOracleResults";
    SwitchboardErrorEnum["AggregatorInvalidUpdateDelay"] = "AggregatorInvalidUpdateDelay";
    SwitchboardErrorEnum["AggregatorIllegalRoundOpenCall"] = "AggregatorIllegalRoundOpenCall";
    SwitchboardErrorEnum["AggregatorQueueNotReady"] = "AggregatorQueueNotReady";
    SwitchboardErrorEnum["ResourceAlreadyExists"] = "ResourceAlreadyExists";
    SwitchboardErrorEnum["PermissionAlreadyExists"] = "PermissionAlreadyExists";
})(SwitchboardErrorEnum || (exports.SwitchboardErrorEnum = SwitchboardErrorEnum = {}));
class SwitchboardError extends Error {
    code;
    hexCode;
    name;
    msg;
    logs;
    constructor(code, hexCode, name, msg, logs) {
        super(`${code}: ${name}${msg ? " - " + msg : ""}`);
        this.code = code;
        this.hexCode = hexCode;
        this.name = name;
        this.msg = msg;
        this.logs = logs;
    }
    static fromErrorType(errorType, logs) {
        switch (errorType) {
            case "Generic":
                return new Generic(logs);
            case "StateNotFound":
                return new StateNotFound(logs);
            case "QueueNotFound":
                return new QueueNotFound(logs);
            case "OracleNotFound":
                return new OracleNotFound(logs);
            case "JobNotFound":
                return new JobNotFound(logs);
            case "CrankNotFound":
                return new CrankNotFound(logs);
            case "AggregatorNotFound":
                return new AggregatorNotFound(logs);
            case "LeaseNotFound":
                return new LeaseNotFound(logs);
            case "OracleWalletNotFound":
                return new OracleWalletNotFound(logs);
            case "StateAlreadyExists":
                return new StateAlreadyExists(logs);
            case "QueueAlreadyExists":
                return new QueueAlreadyExists(logs);
            case "OracleAlreadyExists":
                return new OracleAlreadyExists(logs);
            case "JobAlreadyExists":
                return new JobAlreadyExists(logs);
            case "CrankAlreadyExists":
                return new CrankAlreadyExists(logs);
            case "AggregatorAlreadyExists":
                return new AggregatorAlreadyExists(logs);
            case "LeaseAlreadyExists":
                return new LeaseAlreadyExists(logs);
            case "OracleWalletAlreadyExists":
                return new OracleWalletAlreadyExists(logs);
            case "InvalidAuthority":
                return new InvalidAuthority(logs);
            case "PermissionDenied":
                return new PermissionDenied(logs);
            case "CrankDisabled":
                return new CrankDisabled(logs);
            case "OracleMismatch":
                return new OracleMismatch(logs);
            case "JobsChecksumMismatch":
                return new JobsChecksumMismatch(logs);
            case "OracleAlreadyResponded":
                return new OracleAlreadyResponded(logs);
            case "InvalidArgument":
                return new InvalidArgument(logs);
            case "CrankNotReady":
                return new CrankNotReady(logs);
            case "CrankEmpty":
                return new CrankEmpty(logs);
            case "LeaseInactive":
                return new LeaseInactive(logs);
            case "AggregatorLocked":
                return new AggregatorLocked(logs);
            case "InsufficientCoin":
                return new InsufficientCoin(logs);
            case "LeaseInsufficientCoin":
                return new LeaseInsufficientCoin(logs);
            case "OracleWalletInsufficientCoin":
                return new OracleWalletInsufficientCoin(logs);
            case "AggregatorInvalidBatchSize":
                return new AggregatorInvalidBatchSize(logs);
            case "AggregatorInvalidMinOracleResults":
                return new AggregatorInvalidMinOracleResults(logs);
            case "AggregatorInvalidUpdateDelay":
                return new AggregatorInvalidUpdateDelay(logs);
            case "AggregatorIllegalRoundOpenCall":
                return new AggregatorIllegalRoundOpenCall(logs);
            case "AggregatorQueueNotReady":
                return new AggregatorQueueNotReady(logs);
            case "ResourceAlreadyExists":
                return new ResourceAlreadyExists(logs);
            case "PermissionAlreadyExists":
                return new PermissionAlreadyExists(logs);
            default:
                return new Generic(logs);
        }
    }
}
exports.SwitchboardError = SwitchboardError;
class Generic extends SwitchboardError {
    logs;
    static code = 0;
    static hexCode = "0xb0000";
    constructor(logs) {
        super(0, "0xb0000", "Generic", undefined, logs);
        this.logs = logs;
    }
}
exports.Generic = Generic;
class StateNotFound extends SwitchboardError {
    logs;
    static code = 1;
    static hexCode = "0x60001";
    constructor(logs) {
        super(1, "0x60001", "StateNotFound", undefined, logs);
        this.logs = logs;
    }
}
exports.StateNotFound = StateNotFound;
class QueueNotFound extends SwitchboardError {
    logs;
    static code = 2;
    static hexCode = "0x60002";
    constructor(logs) {
        super(2, "0x60002", "QueueNotFound", undefined, logs);
        this.logs = logs;
    }
}
exports.QueueNotFound = QueueNotFound;
class OracleNotFound extends SwitchboardError {
    logs;
    static code = 3;
    static hexCode = "0x60003";
    constructor(logs) {
        super(3, "0x60003", "OracleNotFound", undefined, logs);
        this.logs = logs;
    }
}
exports.OracleNotFound = OracleNotFound;
class JobNotFound extends SwitchboardError {
    logs;
    static code = 4;
    static hexCode = "0x60004";
    constructor(logs) {
        super(4, "0x60004", "JobNotFound", undefined, logs);
        this.logs = logs;
    }
}
exports.JobNotFound = JobNotFound;
class CrankNotFound extends SwitchboardError {
    logs;
    static code = 5;
    static hexCode = "0x60005";
    constructor(logs) {
        super(5, "0x60005", "CrankNotFound", undefined, logs);
        this.logs = logs;
    }
}
exports.CrankNotFound = CrankNotFound;
class AggregatorNotFound extends SwitchboardError {
    logs;
    static code = 6;
    static hexCode = "0x60006";
    constructor(logs) {
        super(6, "0x60006", "AggregatorNotFound", undefined, logs);
        this.logs = logs;
    }
}
exports.AggregatorNotFound = AggregatorNotFound;
class LeaseNotFound extends SwitchboardError {
    logs;
    static code = 7;
    static hexCode = "0x60007";
    constructor(logs) {
        super(7, "0x60007", "LeaseNotFound", undefined, logs);
        this.logs = logs;
    }
}
exports.LeaseNotFound = LeaseNotFound;
class OracleWalletNotFound extends SwitchboardError {
    logs;
    static code = 8;
    static hexCode = "0x60008";
    constructor(logs) {
        super(8, "0x60008", "OracleWalletNotFound", undefined, logs);
        this.logs = logs;
    }
}
exports.OracleWalletNotFound = OracleWalletNotFound;
class StateAlreadyExists extends SwitchboardError {
    logs;
    static code = 9;
    static hexCode = "0x80009";
    constructor(logs) {
        super(9, "0x80009", "StateAlreadyExists", undefined, logs);
        this.logs = logs;
    }
}
exports.StateAlreadyExists = StateAlreadyExists;
class QueueAlreadyExists extends SwitchboardError {
    logs;
    static code = 10;
    static hexCode = "0x8000a";
    constructor(logs) {
        super(10, "0x8000a", "QueueAlreadyExists", undefined, logs);
        this.logs = logs;
    }
}
exports.QueueAlreadyExists = QueueAlreadyExists;
class OracleAlreadyExists extends SwitchboardError {
    logs;
    static code = 11;
    static hexCode = "0x8000b";
    constructor(logs) {
        super(11, "0x8000b", "OracleAlreadyExists", undefined, logs);
        this.logs = logs;
    }
}
exports.OracleAlreadyExists = OracleAlreadyExists;
class JobAlreadyExists extends SwitchboardError {
    logs;
    static code = 12;
    static hexCode = "0x8000c";
    constructor(logs) {
        super(12, "0x8000c", "JobAlreadyExists", undefined, logs);
        this.logs = logs;
    }
}
exports.JobAlreadyExists = JobAlreadyExists;
class CrankAlreadyExists extends SwitchboardError {
    logs;
    static code = 13;
    static hexCode = "0x8000d";
    constructor(logs) {
        super(13, "0x8000d", "CrankAlreadyExists", undefined, logs);
        this.logs = logs;
    }
}
exports.CrankAlreadyExists = CrankAlreadyExists;
class AggregatorAlreadyExists extends SwitchboardError {
    logs;
    static code = 14;
    static hexCode = "0x8000e";
    constructor(logs) {
        super(14, "0x8000e", "AggregatorAlreadyExists", undefined, logs);
        this.logs = logs;
    }
}
exports.AggregatorAlreadyExists = AggregatorAlreadyExists;
class LeaseAlreadyExists extends SwitchboardError {
    logs;
    static code = 15;
    static hexCode = "0x8000f";
    constructor(logs) {
        super(15, "0x8000f", "LeaseAlreadyExists", undefined, logs);
        this.logs = logs;
    }
}
exports.LeaseAlreadyExists = LeaseAlreadyExists;
class OracleWalletAlreadyExists extends SwitchboardError {
    logs;
    static code = 16;
    static hexCode = "0x80010";
    constructor(logs) {
        super(16, "0x80010", "OracleWalletAlreadyExists", undefined, logs);
        this.logs = logs;
    }
}
exports.OracleWalletAlreadyExists = OracleWalletAlreadyExists;
class InvalidAuthority extends SwitchboardError {
    logs;
    static code = 17;
    static hexCode = "0x50011";
    constructor(logs) {
        super(17, "0x50011", "InvalidAuthority", undefined, logs);
        this.logs = logs;
    }
}
exports.InvalidAuthority = InvalidAuthority;
class PermissionDenied extends SwitchboardError {
    logs;
    static code = 18;
    static hexCode = "0x50012";
    constructor(logs) {
        super(18, "0x50012", "PermissionDenied", undefined, logs);
        this.logs = logs;
    }
}
exports.PermissionDenied = PermissionDenied;
class CrankDisabled extends SwitchboardError {
    logs;
    static code = 19;
    static hexCode = "0x50013";
    constructor(logs) {
        super(19, "0x50013", "CrankDisabled", undefined, logs);
        this.logs = logs;
    }
}
exports.CrankDisabled = CrankDisabled;
class OracleMismatch extends SwitchboardError {
    logs;
    static code = 20;
    static hexCode = "0x10014";
    constructor(logs) {
        super(20, "0x10014", "OracleMismatch", undefined, logs);
        this.logs = logs;
    }
}
exports.OracleMismatch = OracleMismatch;
class JobsChecksumMismatch extends SwitchboardError {
    logs;
    static code = 21;
    static hexCode = "0x10015";
    constructor(logs) {
        super(21, "0x10015", "JobsChecksumMismatch", undefined, logs);
        this.logs = logs;
    }
}
exports.JobsChecksumMismatch = JobsChecksumMismatch;
class OracleAlreadyResponded extends SwitchboardError {
    logs;
    static code = 22;
    static hexCode = "0x10016";
    constructor(logs) {
        super(22, "0x10016", "OracleAlreadyResponded", undefined, logs);
        this.logs = logs;
    }
}
exports.OracleAlreadyResponded = OracleAlreadyResponded;
class InvalidArgument extends SwitchboardError {
    logs;
    static code = 23;
    static hexCode = "0x10017";
    constructor(logs) {
        super(23, "0x10017", "InvalidArgument", undefined, logs);
        this.logs = logs;
    }
}
exports.InvalidArgument = InvalidArgument;
class CrankNotReady extends SwitchboardError {
    logs;
    static code = 24;
    static hexCode = "0x30018";
    constructor(logs) {
        super(24, "0x30018", "CrankNotReady", undefined, logs);
        this.logs = logs;
    }
}
exports.CrankNotReady = CrankNotReady;
class CrankEmpty extends SwitchboardError {
    logs;
    static code = 25;
    static hexCode = "0x30019";
    constructor(logs) {
        super(25, "0x30019", "CrankEmpty", undefined, logs);
        this.logs = logs;
    }
}
exports.CrankEmpty = CrankEmpty;
class LeaseInactive extends SwitchboardError {
    logs;
    static code = 26;
    static hexCode = "0x3001a";
    constructor(logs) {
        super(26, "0x3001a", "LeaseInactive", undefined, logs);
        this.logs = logs;
    }
}
exports.LeaseInactive = LeaseInactive;
class AggregatorLocked extends SwitchboardError {
    logs;
    static code = 27;
    static hexCode = "0x3001b";
    constructor(logs) {
        super(27, "0x3001b", "AggregatorLocked", undefined, logs);
        this.logs = logs;
    }
}
exports.AggregatorLocked = AggregatorLocked;
class InsufficientCoin extends SwitchboardError {
    logs;
    static code = 28;
    static hexCode = "0x9001c";
    constructor(logs) {
        super(28, "0x9001c", "InsufficientCoin", undefined, logs);
        this.logs = logs;
    }
}
exports.InsufficientCoin = InsufficientCoin;
class LeaseInsufficientCoin extends SwitchboardError {
    logs;
    static code = 29;
    static hexCode = "0x9001d";
    constructor(logs) {
        super(29, "0x9001d", "LeaseInsufficientCoin", undefined, logs);
        this.logs = logs;
    }
}
exports.LeaseInsufficientCoin = LeaseInsufficientCoin;
class OracleWalletInsufficientCoin extends SwitchboardError {
    logs;
    static code = 30;
    static hexCode = "0x9001e";
    constructor(logs) {
        super(30, "0x9001e", "OracleWalletInsufficientCoin", undefined, logs);
        this.logs = logs;
    }
}
exports.OracleWalletInsufficientCoin = OracleWalletInsufficientCoin;
class AggregatorInvalidBatchSize extends SwitchboardError {
    logs;
    static code = 31;
    static hexCode = "0x1001f";
    constructor(logs) {
        super(31, "0x1001f", "AggregatorInvalidBatchSize", undefined, logs);
        this.logs = logs;
    }
}
exports.AggregatorInvalidBatchSize = AggregatorInvalidBatchSize;
class AggregatorInvalidMinOracleResults extends SwitchboardError {
    logs;
    static code = 32;
    static hexCode = "0x10020";
    constructor(logs) {
        super(32, "0x10020", "AggregatorInvalidMinOracleResults", undefined, logs);
        this.logs = logs;
    }
}
exports.AggregatorInvalidMinOracleResults = AggregatorInvalidMinOracleResults;
class AggregatorInvalidUpdateDelay extends SwitchboardError {
    logs;
    static code = 33;
    static hexCode = "0x10021";
    constructor(logs) {
        super(33, "0x10021", "AggregatorInvalidUpdateDelay", undefined, logs);
        this.logs = logs;
    }
}
exports.AggregatorInvalidUpdateDelay = AggregatorInvalidUpdateDelay;
class AggregatorIllegalRoundOpenCall extends SwitchboardError {
    logs;
    static code = 34;
    static hexCode = "0x10022";
    constructor(logs) {
        super(34, "0x10022", "AggregatorIllegalRoundOpenCall", undefined, logs);
        this.logs = logs;
    }
}
exports.AggregatorIllegalRoundOpenCall = AggregatorIllegalRoundOpenCall;
class AggregatorQueueNotReady extends SwitchboardError {
    logs;
    static code = 35;
    static hexCode = "0x10023";
    constructor(logs) {
        super(35, "0x10023", "AggregatorQueueNotReady", undefined, logs);
        this.logs = logs;
    }
}
exports.AggregatorQueueNotReady = AggregatorQueueNotReady;
class ResourceAlreadyExists extends SwitchboardError {
    logs;
    static code = 36;
    static hexCode = "0x80024";
    constructor(logs) {
        super(36, "0x80024", "ResourceAlreadyExists", undefined, logs);
        this.logs = logs;
    }
}
exports.ResourceAlreadyExists = ResourceAlreadyExists;
class PermissionAlreadyExists extends SwitchboardError {
    logs;
    static code = 37;
    static hexCode = "0x80025";
    constructor(logs) {
        super(37, "0x80025", "PermissionAlreadyExists", undefined, logs);
        this.logs = logs;
    }
}
exports.PermissionAlreadyExists = PermissionAlreadyExists;
