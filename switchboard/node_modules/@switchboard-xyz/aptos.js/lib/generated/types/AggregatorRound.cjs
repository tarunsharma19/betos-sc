"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AggregatorRound = void 0;
const types = __importStar(require("./index.cjs")); // eslint-disable-line @typescript-eslint/no-unused-vars
const common_1 = require("@switchboard-xyz/common"); // eslint-disable-line @typescript-eslint/no-unused-vars
class AggregatorRound {
    id;
    roundOpenTimestamp;
    roundOpenBlockHeight;
    result;
    stdDeviation;
    minResponse;
    maxResponse;
    oracleKeys;
    medians;
    currentPayout;
    errorsFulfilled;
    numSuccess;
    numError;
    isClosed;
    roundConfirmedTimestamp;
    constructor(fields) {
        this.id = fields.id;
        this.roundOpenTimestamp = fields.roundOpenTimestamp;
        this.roundOpenBlockHeight = fields.roundOpenBlockHeight;
        this.result = fields.result;
        this.stdDeviation = fields.stdDeviation;
        this.minResponse = fields.minResponse;
        this.maxResponse = fields.maxResponse;
        this.oracleKeys = fields.oracleKeys;
        this.medians = fields.medians;
        this.currentPayout = fields.currentPayout;
        this.errorsFulfilled = fields.errorsFulfilled;
        this.numSuccess = fields.numSuccess;
        this.numError = fields.numError;
        this.isClosed = fields.isClosed;
        this.roundConfirmedTimestamp = fields.roundConfirmedTimestamp;
    }
    toJSON() {
        return {
            id: this.id.toString(),
            roundOpenTimestamp: this.roundOpenTimestamp.toString(),
            roundOpenBlockHeight: this.roundOpenBlockHeight.toString(),
            result: this.result.toJSON(),
            stdDeviation: this.stdDeviation.toJSON(),
            minResponse: this.minResponse.toJSON(),
            maxResponse: this.maxResponse.toJSON(),
            oracleKeys: this.oracleKeys.map((item) => item.toString()),
            medians: this.medians.map((item) => (item ? item.toJSON() : undefined)),
            currentPayout: this.currentPayout.map((item) => item.toJSON()),
            errorsFulfilled: this.errorsFulfilled.map((item) => item),
            numSuccess: this.numSuccess.toString(),
            numError: this.numError.toString(),
            isClosed: this.isClosed,
            roundConfirmedTimestamp: this.roundConfirmedTimestamp.toString(),
        };
    }
    static fromJSON(obj) {
        return new AggregatorRound({
            id: new common_1.BN(obj.id),
            roundOpenTimestamp: new common_1.BN(obj.roundOpenTimestamp),
            roundOpenBlockHeight: new common_1.BN(obj.roundOpenBlockHeight),
            result: types.SwitchboardDecimal.fromJSON(obj.result),
            stdDeviation: types.SwitchboardDecimal.fromJSON(obj.stdDeviation),
            minResponse: types.SwitchboardDecimal.fromJSON(obj.minResponse),
            maxResponse: types.SwitchboardDecimal.fromJSON(obj.maxResponse),
            oracleKeys: obj.oracleKeys,
            medians: Array.from(obj.medians.map((item) => item ? types.SwitchboardDecimal.fromJSON(item) : undefined)),
            currentPayout: obj.currentPayout.map((item) => types.SwitchboardDecimal.fromJSON(item)),
            errorsFulfilled: obj.errorsFulfilled.map((item) => item),
            numSuccess: new common_1.BN(obj.numSuccess),
            numError: new common_1.BN(obj.numError),
            isClosed: obj.isClosed,
            roundConfirmedTimestamp: new common_1.BN(obj.roundConfirmedTimestamp),
        });
    }
    toMoveStruct() {
        return {
            id: this.id.toString(),
            round_open_timestamp: this.roundOpenTimestamp.toString(),
            round_open_block_height: this.roundOpenBlockHeight.toString(),
            result: this.result.toMoveStruct(),
            std_deviation: this.stdDeviation.toMoveStruct(),
            min_response: this.minResponse.toMoveStruct(),
            max_response: this.maxResponse.toMoveStruct(),
            oracle_keys: this.oracleKeys.map((item) => item.toString()),
            medians: this.medians.map((item) => item ? { vec: [item.toMoveStruct()] } : null),
            current_payout: this.currentPayout.map((item) => item.toMoveStruct()),
            errors_fulfilled: this.errorsFulfilled.map((item) => item),
            num_success: this.numSuccess.toString(),
            num_error: this.numError.toString(),
            is_closed: this.isClosed,
            round_confirmed_timestamp: this.roundConfirmedTimestamp.toString(),
        };
    }
    static fromMoveStruct(obj) {
        return new AggregatorRound({
            id: new common_1.BN(obj.id),
            roundOpenTimestamp: new common_1.BN(obj.round_open_timestamp),
            roundOpenBlockHeight: new common_1.BN(obj.round_open_block_height),
            result: types.SwitchboardDecimal.fromMoveStruct(obj.result),
            stdDeviation: types.SwitchboardDecimal.fromMoveStruct(obj.std_deviation),
            minResponse: types.SwitchboardDecimal.fromMoveStruct(obj.min_response),
            maxResponse: types.SwitchboardDecimal.fromMoveStruct(obj.max_response),
            oracleKeys: obj.oracle_keys,
            medians: Array.from(obj.medians.map((item) => item.vec.length > 0
                ? types.SwitchboardDecimal.fromMoveStruct(item.vec[0])
                : undefined)),
            currentPayout: obj.current_payout.map((item) => types.SwitchboardDecimal.fromMoveStruct(item)),
            errorsFulfilled: obj.errors_fulfilled.map((item) => item),
            numSuccess: new common_1.BN(obj.num_success),
            numError: new common_1.BN(obj.num_error),
            isClosed: obj.is_closed,
            roundConfirmedTimestamp: new common_1.BN(obj.round_confirmed_timestamp),
        });
    }
}
exports.AggregatorRound = AggregatorRound;
