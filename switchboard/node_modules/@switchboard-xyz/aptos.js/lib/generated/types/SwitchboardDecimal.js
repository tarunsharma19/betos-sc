import { Big, BN } from "@switchboard-xyz/common"; // eslint-disable-line @typescript-eslint/no-unused-vars
export class SwitchboardDecimal {
    value;
    dec;
    neg;
    constructor(fields) {
        this.value = fields.value;
        this.dec = fields.dec;
        this.neg = fields.neg;
    }
    toJSON() {
        return {
            value: this.value.toString(),
            dec: this.dec,
            neg: this.neg,
        };
    }
    static fromJSON(obj) {
        return new SwitchboardDecimal({
            value: new BN(obj.value),
            dec: obj.dec,
            neg: obj.neg,
        });
    }
    toMoveStruct() {
        return {
            value: this.value.toString(),
            dec: this.dec,
            neg: this.neg,
        };
    }
    static fromMoveStruct(obj) {
        return new SwitchboardDecimal({
            value: new BN(obj.value),
            dec: obj.dec,
            neg: obj.neg,
        });
    }
    toBig() {
        const oldDp = Big.DP;
        Big.DP = 18;
        let result = new Big(this.value.toString());
        if (this.neg === true) {
            result = result.mul(-1);
        }
        const TEN = new Big(10);
        result = safeDiv(result, TEN.pow(this.dec));
        Big.DP = oldDp;
        return result;
    }
    static fromBig(val) {
        const value = val.c.slice();
        const e = val.e + 1;
        while (value.length - e > 9) {
            value.pop();
        }
        return new SwitchboardDecimal({
            value: new BN(value.join("")),
            dec: value.length - e,
            neg: val.s === -1,
        });
    }
}
function safeDiv(number_, denominator, decimals = 20) {
    const oldDp = Big.DP;
    Big.DP = decimals;
    const result = number_.div(denominator);
    Big.DP = oldDp;
    return result;
}
