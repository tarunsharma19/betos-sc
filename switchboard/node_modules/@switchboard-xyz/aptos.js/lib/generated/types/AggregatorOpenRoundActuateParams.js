import * as types from "./index.js"; // eslint-disable-line @typescript-eslint/no-unused-vars
import { BN } from "@switchboard-xyz/common"; // eslint-disable-line @typescript-eslint/no-unused-vars
export class AggregatorOpenRoundActuateParams {
    openRoundParams;
    queueAddr;
    batchSize;
    jobKeys;
    reward;
    openRoundReward;
    constructor(fields) {
        this.openRoundParams = fields.openRoundParams;
        this.queueAddr = fields.queueAddr;
        this.batchSize = fields.batchSize;
        this.jobKeys = fields.jobKeys;
        this.reward = fields.reward;
        this.openRoundReward = fields.openRoundReward;
    }
    toJSON() {
        return {
            openRoundParams: this.openRoundParams.toJSON(),
            queueAddr: this.queueAddr.toString(),
            batchSize: this.batchSize.toString(),
            jobKeys: this.jobKeys.map((item) => item.toString()),
            reward: this.reward.toString(),
            openRoundReward: this.openRoundReward.toString(),
        };
    }
    static fromJSON(obj) {
        return new AggregatorOpenRoundActuateParams({
            openRoundParams: types.AggregatorOpenRoundParams.fromJSON(obj.openRoundParams),
            queueAddr: obj.queueAddr,
            batchSize: new BN(obj.batchSize),
            jobKeys: obj.jobKeys,
            reward: new BN(obj.reward),
            openRoundReward: new BN(obj.openRoundReward),
        });
    }
    toMoveStruct() {
        return {
            open_round_params: this.openRoundParams.toMoveStruct(),
            queue_addr: this.queueAddr.toString(),
            batch_size: this.batchSize.toString(),
            job_keys: this.jobKeys.map((item) => item.toString()),
            reward: this.reward.toString(),
            open_round_reward: this.openRoundReward.toString(),
        };
    }
    static fromMoveStruct(obj) {
        return new AggregatorOpenRoundActuateParams({
            openRoundParams: types.AggregatorOpenRoundParams.fromMoveStruct(obj.open_round_params),
            queueAddr: obj.queue_addr,
            batchSize: new BN(obj.batch_size),
            jobKeys: obj.job_keys,
            reward: new BN(obj.reward),
            openRoundReward: new BN(obj.open_round_reward),
        });
    }
}
