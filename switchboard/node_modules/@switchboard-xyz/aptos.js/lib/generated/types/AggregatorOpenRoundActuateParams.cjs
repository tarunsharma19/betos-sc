"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AggregatorOpenRoundActuateParams = void 0;
const types = __importStar(require("./index.cjs")); // eslint-disable-line @typescript-eslint/no-unused-vars
const common_1 = require("@switchboard-xyz/common"); // eslint-disable-line @typescript-eslint/no-unused-vars
class AggregatorOpenRoundActuateParams {
    openRoundParams;
    queueAddr;
    batchSize;
    jobKeys;
    reward;
    openRoundReward;
    constructor(fields) {
        this.openRoundParams = fields.openRoundParams;
        this.queueAddr = fields.queueAddr;
        this.batchSize = fields.batchSize;
        this.jobKeys = fields.jobKeys;
        this.reward = fields.reward;
        this.openRoundReward = fields.openRoundReward;
    }
    toJSON() {
        return {
            openRoundParams: this.openRoundParams.toJSON(),
            queueAddr: this.queueAddr.toString(),
            batchSize: this.batchSize.toString(),
            jobKeys: this.jobKeys.map((item) => item.toString()),
            reward: this.reward.toString(),
            openRoundReward: this.openRoundReward.toString(),
        };
    }
    static fromJSON(obj) {
        return new AggregatorOpenRoundActuateParams({
            openRoundParams: types.AggregatorOpenRoundParams.fromJSON(obj.openRoundParams),
            queueAddr: obj.queueAddr,
            batchSize: new common_1.BN(obj.batchSize),
            jobKeys: obj.jobKeys,
            reward: new common_1.BN(obj.reward),
            openRoundReward: new common_1.BN(obj.openRoundReward),
        });
    }
    toMoveStruct() {
        return {
            open_round_params: this.openRoundParams.toMoveStruct(),
            queue_addr: this.queueAddr.toString(),
            batch_size: this.batchSize.toString(),
            job_keys: this.jobKeys.map((item) => item.toString()),
            reward: this.reward.toString(),
            open_round_reward: this.openRoundReward.toString(),
        };
    }
    static fromMoveStruct(obj) {
        return new AggregatorOpenRoundActuateParams({
            openRoundParams: types.AggregatorOpenRoundParams.fromMoveStruct(obj.open_round_params),
            queueAddr: obj.queue_addr,
            batchSize: new common_1.BN(obj.batch_size),
            jobKeys: obj.job_keys,
            reward: new common_1.BN(obj.reward),
            openRoundReward: new common_1.BN(obj.open_round_reward),
        });
    }
}
exports.AggregatorOpenRoundActuateParams = AggregatorOpenRoundActuateParams;
