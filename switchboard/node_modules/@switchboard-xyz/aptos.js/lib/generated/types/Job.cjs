"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Job = void 0;
const common_1 = require("@switchboard-xyz/common"); // eslint-disable-line @typescript-eslint/no-unused-vars
class Job {
    addr;
    name;
    metadata;
    authority;
    expiration;
    hash;
    data;
    referenceCount;
    totalSpent;
    createdAt;
    variables;
    features;
    _ebuf;
    constructor(fields) {
        this.addr = fields.addr;
        this.name = fields.name;
        this.metadata = fields.metadata;
        this.authority = fields.authority;
        this.expiration = fields.expiration;
        this.hash = fields.hash;
        this.data = fields.data;
        this.referenceCount = fields.referenceCount;
        this.totalSpent = fields.totalSpent;
        this.createdAt = fields.createdAt;
        this.variables = fields.variables;
        this.features = fields.features;
        this._ebuf = fields._ebuf;
    }
    toJSON() {
        return {
            addr: this.addr.toString(),
            name: [...this.name],
            metadata: [...this.metadata],
            authority: this.authority.toString(),
            expiration: this.expiration.toString(),
            hash: [...this.hash],
            data: [...this.data],
            referenceCount: this.referenceCount.toString(),
            totalSpent: this.totalSpent.toString(),
            createdAt: this.createdAt.toString(),
            variables: this.variables.map((item) => [...item]),
            features: this.features.map((item) => item),
            _ebuf: [...this._ebuf],
        };
    }
    static fromJSON(obj) {
        return new Job({
            addr: obj.addr,
            name: new Uint8Array(obj.name),
            metadata: new Uint8Array(obj.metadata),
            authority: obj.authority,
            expiration: new common_1.BN(obj.expiration),
            hash: new Uint8Array(obj.hash),
            data: new Uint8Array(obj.data),
            referenceCount: new common_1.BN(obj.referenceCount),
            totalSpent: new common_1.BN(obj.totalSpent),
            createdAt: new common_1.BN(obj.createdAt),
            variables: obj.variables.map((item) => new Uint8Array(item)),
            features: obj.features.map((item) => item),
            _ebuf: new Uint8Array(obj._ebuf),
        });
    }
    toMoveStruct() {
        return {
            addr: this.addr.toString(),
            name: Buffer.from(this.name).toString("hex"),
            metadata: Buffer.from(this.metadata).toString("hex"),
            authority: this.authority.toString(),
            expiration: this.expiration.toString(),
            hash: Buffer.from(this.hash).toString("hex"),
            data: Buffer.from(this.data).toString("hex"),
            reference_count: this.referenceCount.toString(),
            total_spent: this.totalSpent.toString(),
            created_at: this.createdAt.toString(),
            variables: this.variables.map((item) => Buffer.from(item).toString("hex")),
            features: this.features.map((item) => item),
            _ebuf: Buffer.from(this._ebuf).toString("hex"),
        };
    }
    static fromMoveStruct(obj) {
        return new Job({
            addr: obj.addr,
            name: typeof obj.name === "string"
                ? new Uint8Array(Buffer.from(obj.name.slice(2), "hex"))
                : new Uint8Array(obj.name),
            metadata: typeof obj.metadata === "string"
                ? new Uint8Array(Buffer.from(obj.metadata.slice(2), "hex"))
                : new Uint8Array(obj.metadata),
            authority: obj.authority,
            expiration: new common_1.BN(obj.expiration),
            hash: typeof obj.hash === "string"
                ? new Uint8Array(Buffer.from(obj.hash.slice(2), "hex"))
                : new Uint8Array(obj.hash),
            data: typeof obj.data === "string"
                ? new Uint8Array(Buffer.from(obj.data.slice(2), "hex"))
                : new Uint8Array(obj.data),
            referenceCount: new common_1.BN(obj.reference_count),
            totalSpent: new common_1.BN(obj.total_spent),
            createdAt: new common_1.BN(obj.created_at),
            variables: obj.variables.map((item) => new Uint8Array(Buffer.from(item, "hex"))),
            features: obj.features.map((item) => item),
            _ebuf: typeof obj._ebuf === "string"
                ? new Uint8Array(Buffer.from(obj._ebuf.slice(2), "hex"))
                : new Uint8Array(obj._ebuf),
        });
    }
}
exports.Job = Job;
