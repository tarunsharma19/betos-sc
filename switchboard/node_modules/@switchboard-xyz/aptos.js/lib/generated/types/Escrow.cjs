"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Escrow = void 0;
const types = __importStar(require("./index.cjs")); // eslint-disable-line @typescript-eslint/no-unused-vars
const common_1 = require("@switchboard-xyz/common"); // eslint-disable-line @typescript-eslint/no-unused-vars
class Escrow {
    createdAt;
    authority;
    escrow;
    features;
    _ebuf;
    constructor(fields) {
        this.createdAt = fields.createdAt;
        this.authority = fields.authority;
        this.escrow = fields.escrow;
        this.features = fields.features;
        this._ebuf = fields._ebuf;
    }
    toJSON() {
        return {
            createdAt: this.createdAt.toString(),
            authority: this.authority.toString(),
            escrow: this.escrow.toJSON(),
            features: this.features.map((item) => item),
            _ebuf: [...this._ebuf],
        };
    }
    static fromJSON(obj) {
        return new Escrow({
            createdAt: new common_1.BN(obj.createdAt),
            authority: obj.authority,
            escrow: types.Coin.fromJSON(obj.escrow),
            features: obj.features.map((item) => item),
            _ebuf: new Uint8Array(obj._ebuf),
        });
    }
    toMoveStruct() {
        return {
            created_at: this.createdAt.toString(),
            authority: this.authority.toString(),
            escrow: this.escrow.toMoveStruct(),
            features: this.features.map((item) => item),
            _ebuf: Buffer.from(this._ebuf).toString("hex"),
        };
    }
    static fromMoveStruct(obj) {
        return new Escrow({
            createdAt: new common_1.BN(obj.created_at),
            authority: obj.authority,
            escrow: types.Coin.fromMoveStruct(obj.escrow),
            features: obj.features.map((item) => item),
            _ebuf: typeof obj._ebuf === "string"
                ? new Uint8Array(Buffer.from(obj._ebuf.slice(2), "hex"))
                : new Uint8Array(obj._ebuf),
        });
    }
}
exports.Escrow = Escrow;
