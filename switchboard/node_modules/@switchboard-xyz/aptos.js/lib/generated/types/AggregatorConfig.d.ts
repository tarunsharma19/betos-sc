import * as types from "./index.js";
import type { AccountAddressInput } from "@aptos-labs/ts-sdk";
import { BN } from "@switchboard-xyz/common";
export interface IAggregatorConfig {
    queueAddr: AccountAddressInput;
    batchSize: BN;
    minOracleResults: BN;
    minUpdateDelaySeconds: BN;
    historyLimit: BN;
    varianceThreshold: types.SwitchboardDecimal;
    forceReportPeriod: BN;
    minJobResults: BN;
    expiration: BN;
    crankAddr: AccountAddressInput;
    crankDisabled: boolean;
    crankRowCount: BN;
    nextAllowedUpdateTime: BN;
    consecutiveFailureCount: BN;
    startAfter: BN;
}
export interface AggregatorConfigJSON {
    queueAddr: string;
    batchSize: string;
    minOracleResults: string;
    minUpdateDelaySeconds: string;
    historyLimit: string;
    varianceThreshold: types.SwitchboardDecimalJSON;
    forceReportPeriod: string;
    minJobResults: string;
    expiration: string;
    crankAddr: string;
    crankDisabled: boolean;
    crankRowCount: string;
    nextAllowedUpdateTime: string;
    consecutiveFailureCount: string;
    startAfter: string;
}
export interface AggregatorConfigMoveStruct {
    queue_addr: string;
    batch_size: string;
    min_oracle_results: string;
    min_update_delay_seconds: string;
    history_limit: string;
    variance_threshold: types.SwitchboardDecimalMoveStruct;
    force_report_period: string;
    min_job_results: string;
    expiration: string;
    crank_addr: string;
    crank_disabled: boolean;
    crank_row_count: string;
    next_allowed_update_time: string;
    consecutive_failure_count: string;
    start_after: string;
}
export declare class AggregatorConfig implements IAggregatorConfig {
    readonly queueAddr: AccountAddressInput;
    readonly batchSize: BN;
    readonly minOracleResults: BN;
    readonly minUpdateDelaySeconds: BN;
    readonly historyLimit: BN;
    readonly varianceThreshold: types.SwitchboardDecimal;
    readonly forceReportPeriod: BN;
    readonly minJobResults: BN;
    readonly expiration: BN;
    readonly crankAddr: AccountAddressInput;
    readonly crankDisabled: boolean;
    readonly crankRowCount: BN;
    readonly nextAllowedUpdateTime: BN;
    readonly consecutiveFailureCount: BN;
    readonly startAfter: BN;
    constructor(fields: IAggregatorConfig);
    toJSON(): AggregatorConfigJSON;
    static fromJSON(obj: AggregatorConfigJSON): types.AggregatorConfig;
    toMoveStruct(): AggregatorConfigMoveStruct;
    static fromMoveStruct(obj: AggregatorConfigMoveStruct): types.AggregatorConfig;
}
//# sourceMappingURL=AggregatorConfig.d.ts.map