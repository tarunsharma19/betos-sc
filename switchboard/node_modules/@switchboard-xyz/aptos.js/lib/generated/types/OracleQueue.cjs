"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OracleQueue = void 0;
const types = __importStar(require("./index.cjs")); // eslint-disable-line @typescript-eslint/no-unused-vars
const common_1 = require("@switchboard-xyz/common"); // eslint-disable-line @typescript-eslint/no-unused-vars
class OracleQueue {
    name;
    metadata;
    authority;
    oracleTimeout;
    reward;
    minStake;
    slashingEnabled;
    varianceToleranceMultiplier;
    feedProbationPeriod;
    currIdx;
    gcIdx;
    consecutiveFeedFailureLimit;
    consecutiveOracleFailureLimit;
    unpermissionedFeedsEnabled;
    unpermissionedVrfEnabled;
    lockLeaseFunding;
    enableBufferRelayers;
    maxSize;
    data;
    createdAt;
    features;
    _ebuf;
    constructor(fields) {
        this.name = fields.name;
        this.metadata = fields.metadata;
        this.authority = fields.authority;
        this.oracleTimeout = fields.oracleTimeout;
        this.reward = fields.reward;
        this.minStake = fields.minStake;
        this.slashingEnabled = fields.slashingEnabled;
        this.varianceToleranceMultiplier = fields.varianceToleranceMultiplier;
        this.feedProbationPeriod = fields.feedProbationPeriod;
        this.currIdx = fields.currIdx;
        this.gcIdx = fields.gcIdx;
        this.consecutiveFeedFailureLimit = fields.consecutiveFeedFailureLimit;
        this.consecutiveOracleFailureLimit = fields.consecutiveOracleFailureLimit;
        this.unpermissionedFeedsEnabled = fields.unpermissionedFeedsEnabled;
        this.unpermissionedVrfEnabled = fields.unpermissionedVrfEnabled;
        this.lockLeaseFunding = fields.lockLeaseFunding;
        this.enableBufferRelayers = fields.enableBufferRelayers;
        this.maxSize = fields.maxSize;
        this.data = fields.data;
        this.createdAt = fields.createdAt;
        this.features = fields.features;
        this._ebuf = fields._ebuf;
    }
    toJSON() {
        return {
            name: [...this.name],
            metadata: [...this.metadata],
            authority: this.authority.toString(),
            oracleTimeout: this.oracleTimeout.toString(),
            reward: this.reward.toString(),
            minStake: this.minStake.toString(),
            slashingEnabled: this.slashingEnabled,
            varianceToleranceMultiplier: this.varianceToleranceMultiplier.toJSON(),
            feedProbationPeriod: this.feedProbationPeriod.toString(),
            currIdx: this.currIdx.toString(),
            gcIdx: this.gcIdx.toString(),
            consecutiveFeedFailureLimit: this.consecutiveFeedFailureLimit.toString(),
            consecutiveOracleFailureLimit: this.consecutiveOracleFailureLimit.toString(),
            unpermissionedFeedsEnabled: this.unpermissionedFeedsEnabled,
            unpermissionedVrfEnabled: this.unpermissionedVrfEnabled,
            lockLeaseFunding: this.lockLeaseFunding,
            enableBufferRelayers: this.enableBufferRelayers,
            maxSize: this.maxSize.toString(),
            data: this.data.map((item) => item.toString()),
            createdAt: this.createdAt.toString(),
            features: this.features.map((item) => item),
            _ebuf: [...this._ebuf],
        };
    }
    static fromJSON(obj) {
        return new OracleQueue({
            name: new Uint8Array(obj.name),
            metadata: new Uint8Array(obj.metadata),
            authority: obj.authority,
            oracleTimeout: new common_1.BN(obj.oracleTimeout),
            reward: new common_1.BN(obj.reward),
            minStake: new common_1.BN(obj.minStake),
            slashingEnabled: obj.slashingEnabled,
            varianceToleranceMultiplier: types.SwitchboardDecimal.fromJSON(obj.varianceToleranceMultiplier),
            feedProbationPeriod: new common_1.BN(obj.feedProbationPeriod),
            currIdx: new common_1.BN(obj.currIdx),
            gcIdx: new common_1.BN(obj.gcIdx),
            consecutiveFeedFailureLimit: new common_1.BN(obj.consecutiveFeedFailureLimit),
            consecutiveOracleFailureLimit: new common_1.BN(obj.consecutiveOracleFailureLimit),
            unpermissionedFeedsEnabled: obj.unpermissionedFeedsEnabled,
            unpermissionedVrfEnabled: obj.unpermissionedVrfEnabled,
            lockLeaseFunding: obj.lockLeaseFunding,
            enableBufferRelayers: obj.enableBufferRelayers,
            maxSize: new common_1.BN(obj.maxSize),
            data: obj.data.map((item) => item),
            createdAt: new common_1.BN(obj.createdAt),
            features: obj.features.map((item) => item),
            _ebuf: new Uint8Array(obj._ebuf),
        });
    }
    toMoveStruct() {
        return {
            name: Buffer.from(this.name).toString("hex"),
            metadata: Buffer.from(this.metadata).toString("hex"),
            authority: this.authority.toString(),
            oracle_timeout: this.oracleTimeout.toString(),
            reward: this.reward.toString(),
            min_stake: this.minStake.toString(),
            slashing_enabled: this.slashingEnabled,
            variance_tolerance_multiplier: this.varianceToleranceMultiplier.toMoveStruct(),
            feed_probation_period: this.feedProbationPeriod.toString(),
            curr_idx: this.currIdx.toString(),
            gc_idx: this.gcIdx.toString(),
            consecutive_feed_failure_limit: this.consecutiveFeedFailureLimit.toString(),
            consecutive_oracle_failure_limit: this.consecutiveOracleFailureLimit.toString(),
            unpermissioned_feeds_enabled: this.unpermissionedFeedsEnabled,
            unpermissioned_vrf_enabled: this.unpermissionedVrfEnabled,
            lock_lease_funding: this.lockLeaseFunding,
            enable_buffer_relayers: this.enableBufferRelayers,
            max_size: this.maxSize.toString(),
            data: this.data.map((item) => item.toString()),
            created_at: this.createdAt.toString(),
            features: this.features.map((item) => item),
            _ebuf: Buffer.from(this._ebuf).toString("hex"),
        };
    }
    static fromMoveStruct(obj) {
        return new OracleQueue({
            name: typeof obj.name === "string"
                ? new Uint8Array(Buffer.from(obj.name.slice(2), "hex"))
                : new Uint8Array(obj.name),
            metadata: typeof obj.metadata === "string"
                ? new Uint8Array(Buffer.from(obj.metadata.slice(2), "hex"))
                : new Uint8Array(obj.metadata),
            authority: obj.authority,
            oracleTimeout: new common_1.BN(obj.oracle_timeout),
            reward: new common_1.BN(obj.reward),
            minStake: new common_1.BN(obj.min_stake),
            slashingEnabled: obj.slashing_enabled,
            varianceToleranceMultiplier: types.SwitchboardDecimal.fromMoveStruct(obj.variance_tolerance_multiplier),
            feedProbationPeriod: new common_1.BN(obj.feed_probation_period),
            currIdx: new common_1.BN(obj.curr_idx),
            gcIdx: new common_1.BN(obj.gc_idx),
            consecutiveFeedFailureLimit: new common_1.BN(obj.consecutive_feed_failure_limit),
            consecutiveOracleFailureLimit: new common_1.BN(obj.consecutive_oracle_failure_limit),
            unpermissionedFeedsEnabled: obj.unpermissioned_feeds_enabled,
            unpermissionedVrfEnabled: obj.unpermissioned_vrf_enabled,
            lockLeaseFunding: obj.lock_lease_funding,
            enableBufferRelayers: obj.enable_buffer_relayers,
            maxSize: new common_1.BN(obj.max_size),
            data: obj.data.map((item) => item),
            createdAt: new common_1.BN(obj.created_at),
            features: obj.features.map((item) => item),
            _ebuf: typeof obj._ebuf === "string"
                ? new Uint8Array(Buffer.from(obj._ebuf.slice(2), "hex"))
                : new Uint8Array(obj._ebuf),
        });
    }
}
exports.OracleQueue = OracleQueue;
