import * as types from "./index.js";
import type { AccountAddressInput } from "@aptos-labs/ts-sdk";
import { BN } from "@switchboard-xyz/common";
export interface IAggregatorRound {
    id: BN;
    roundOpenTimestamp: BN;
    roundOpenBlockHeight: BN;
    result: types.SwitchboardDecimal;
    stdDeviation: types.SwitchboardDecimal;
    minResponse: types.SwitchboardDecimal;
    maxResponse: types.SwitchboardDecimal;
    oracleKeys: Array<AccountAddressInput>;
    medians: Array<types.SwitchboardDecimal | undefined>;
    currentPayout: Array<types.SwitchboardDecimal>;
    errorsFulfilled: Array<boolean>;
    numSuccess: BN;
    numError: BN;
    isClosed: boolean;
    roundConfirmedTimestamp: BN;
}
export interface AggregatorRoundJSON {
    id: string;
    roundOpenTimestamp: string;
    roundOpenBlockHeight: string;
    result: types.SwitchboardDecimalJSON;
    stdDeviation: types.SwitchboardDecimalJSON;
    minResponse: types.SwitchboardDecimalJSON;
    maxResponse: types.SwitchboardDecimalJSON;
    oracleKeys: Array<string>;
    medians: Array<types.SwitchboardDecimalJSON | undefined>;
    currentPayout: Array<types.SwitchboardDecimalJSON>;
    errorsFulfilled: Array<boolean>;
    numSuccess: string;
    numError: string;
    isClosed: boolean;
    roundConfirmedTimestamp: string;
}
export interface AggregatorRoundMoveStruct {
    id: string;
    round_open_timestamp: string;
    round_open_block_height: string;
    result: types.SwitchboardDecimalMoveStruct;
    std_deviation: types.SwitchboardDecimalMoveStruct;
    min_response: types.SwitchboardDecimalMoveStruct;
    max_response: types.SwitchboardDecimalMoveStruct;
    oracle_keys: Array<string>;
    medians: Array<types.OptionalMoveStruct<types.SwitchboardDecimalJSON>>;
    current_payout: Array<types.SwitchboardDecimalMoveStruct>;
    errors_fulfilled: Array<boolean>;
    num_success: string;
    num_error: string;
    is_closed: boolean;
    round_confirmed_timestamp: string;
}
export declare class AggregatorRound implements IAggregatorRound {
    readonly id: BN;
    readonly roundOpenTimestamp: BN;
    readonly roundOpenBlockHeight: BN;
    readonly result: types.SwitchboardDecimal;
    readonly stdDeviation: types.SwitchboardDecimal;
    readonly minResponse: types.SwitchboardDecimal;
    readonly maxResponse: types.SwitchboardDecimal;
    readonly oracleKeys: Array<AccountAddressInput>;
    readonly medians: Array<types.SwitchboardDecimal | undefined>;
    readonly currentPayout: Array<types.SwitchboardDecimal>;
    readonly errorsFulfilled: Array<boolean>;
    readonly numSuccess: BN;
    readonly numError: BN;
    readonly isClosed: boolean;
    readonly roundConfirmedTimestamp: BN;
    constructor(fields: IAggregatorRound);
    toJSON(): AggregatorRoundJSON;
    static fromJSON(obj: AggregatorRoundJSON): types.AggregatorRound;
    toMoveStruct(): AggregatorRoundMoveStruct;
    static fromMoveStruct(obj: AggregatorRoundMoveStruct): types.AggregatorRound;
}
//# sourceMappingURL=AggregatorRound.d.ts.map