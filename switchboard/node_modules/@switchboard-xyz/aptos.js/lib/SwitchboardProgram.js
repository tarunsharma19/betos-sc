import { MAINNET_PROGRAM_ID, TESTNET_PROGRAM_ID } from "./generated/index.js";
import { Account, Aptos, AptosConfig, Ed25519PrivateKey, } from "@aptos-labs/ts-sdk";
export class AptosSimulationError extends Error {
    constructor(message) {
        super(`SimulationError: ${message}`);
        Object.setPrototypeOf(this, AptosSimulationError.prototype);
    }
}
export function getProgramId(networkId, programId) {
    if (programId) {
        return programId;
    }
    switch (networkId) {
        case "mainnet":
            return MAINNET_PROGRAM_ID;
        case "testnet":
            return TESTNET_PROGRAM_ID;
        default:
            throw new Error(`Failed to find Aptos ProgramID. Try passing in a programId`);
    }
}
export function getRpcUrl(networkId) {
    switch (networkId) {
        case "mainnet":
            return "https://fullnode.mainnet.aptoslabs.com/v1";
        case "testnet":
            return "https://fullnode.testnet.aptoslabs.com/v1";
        case "devnet":
            return "http://localhost:8080";
        default:
            throw new Error(`Failed to find Aptos RpcUrl for network ${networkId}. Try passing in an rpcUrl`);
    }
}
export class SwitchboardProgram {
    client;
    network;
    switchboardAddress;
    signer;
    coinType;
    constructor(client, network, switchboardAddress, signer, coinType = "0x1::aptos_coin::AptosCoin") {
        this.client = client;
        this.network = network;
        this.switchboardAddress = switchboardAddress;
        this.signer = signer;
        this.coinType = coinType;
    }
    get READ_ONLY() {
        return this.signer === undefined;
    }
    get newAccount() {
        return Account.generate();
    }
    static getAccount(privateKeyBytes, address) {
        return Account.fromPrivateKey({
            privateKey: new Ed25519PrivateKey(privateKeyBytes),
            address,
        });
    }
    static async load(network, rpcUrl, programId, signer, coinType = "0x1::aptos_coin::AptosCoin") {
        const switchboardAddress = programId ?? getProgramId(network, programId);
        const client = new Aptos(new AptosConfig({
            fullnode: rpcUrl ?? getRpcUrl(network),
            network,
        }));
        return new SwitchboardProgram(client, network, switchboardAddress, signer, coinType);
    }
}
