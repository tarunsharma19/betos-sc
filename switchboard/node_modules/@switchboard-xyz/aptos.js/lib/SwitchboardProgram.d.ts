import type { AccountAddressInput, Network } from "@aptos-labs/ts-sdk";
import { Account, Aptos } from "@aptos-labs/ts-sdk";
export type AptosNetwork = "localnet" | "devnet" | "testnet" | "mainnet";
export declare class AptosSimulationError extends Error {
    constructor(message: string);
}
export declare function getProgramId(networkId: Network, programId?: AccountAddressInput): AccountAddressInput;
export declare function getRpcUrl(networkId: Network): string;
export declare class SwitchboardProgram {
    readonly client: Aptos;
    readonly network: Network;
    readonly switchboardAddress: AccountAddressInput;
    readonly signer?: Account | undefined;
    readonly coinType: string;
    constructor(client: Aptos, network: Network, switchboardAddress: AccountAddressInput, signer?: Account | undefined, coinType?: string);
    get READ_ONLY(): boolean;
    get newAccount(): Account;
    static getAccount(privateKeyBytes: Uint8Array, address?: AccountAddressInput): Account;
    static load(network: Network, rpcUrl?: string, programId?: AccountAddressInput, signer?: Account, coinType?: string): Promise<SwitchboardProgram>;
}
//# sourceMappingURL=SwitchboardProgram.d.ts.map